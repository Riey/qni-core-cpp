// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qni-api.proto

#ifndef PROTOBUF_INCLUDED_qni_2dapi_2eproto
#define PROTOBUF_INCLUDED_qni_2dapi_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_qni_2dapi_2eproto 

namespace protobuf_qni_2dapi_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_qni_2dapi_2eproto
namespace qni {
namespace api {
class ConsoleMessage;
class ConsoleMessageDefaultTypeInternal;
extern ConsoleMessageDefaultTypeInternal _ConsoleMessage_default_instance_;
class ConsolePrintButtonData;
class ConsolePrintButtonDataDefaultTypeInternal;
extern ConsolePrintButtonDataDefaultTypeInternal _ConsolePrintButtonData_default_instance_;
class ConsolePrintData;
class ConsolePrintDataDefaultTypeInternal;
extern ConsolePrintDataDefaultTypeInternal _ConsolePrintData_default_instance_;
class ConsoleRequest;
class ConsoleRequestDefaultTypeInternal;
extern ConsoleRequestDefaultTypeInternal _ConsoleRequest_default_instance_;
class ConsoleResponse;
class ConsoleResponseDefaultTypeInternal;
extern ConsoleResponseDefaultTypeInternal _ConsoleResponse_default_instance_;
class ConsoleSettingItem;
class ConsoleSettingItemDefaultTypeInternal;
extern ConsoleSettingItemDefaultTypeInternal _ConsoleSettingItem_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class ErrorResponse;
class ErrorResponseDefaultTypeInternal;
extern ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;
class Font;
class FontDefaultTypeInternal;
extern FontDefaultTypeInternal _Font_default_instance_;
class InputRequest;
class InputRequestDefaultTypeInternal;
extern InputRequestDefaultTypeInternal _InputRequest_default_instance_;
class InputResponse;
class InputResponseDefaultTypeInternal;
extern InputResponseDefaultTypeInternal _InputResponse_default_instance_;
class ProgramCommand;
class ProgramCommandDefaultTypeInternal;
extern ProgramCommandDefaultTypeInternal _ProgramCommand_default_instance_;
class ProgramCommandArray;
class ProgramCommandArrayDefaultTypeInternal;
extern ProgramCommandArrayDefaultTypeInternal _ProgramCommandArray_default_instance_;
class ProgramMessage;
class ProgramMessageDefaultTypeInternal;
extern ProgramMessageDefaultTypeInternal _ProgramMessage_default_instance_;
class ProgramRequest;
class ProgramRequestDefaultTypeInternal;
extern ProgramRequestDefaultTypeInternal _ProgramRequest_default_instance_;
class ProgramResponse;
class ProgramResponseDefaultTypeInternal;
extern ProgramResponseDefaultTypeInternal _ProgramResponse_default_instance_;
class StringArray;
class StringArrayDefaultTypeInternal;
extern StringArrayDefaultTypeInternal _StringArray_default_instance_;
}  // namespace api
}  // namespace qni
namespace google {
namespace protobuf {
template<> ::qni::api::ConsoleMessage* Arena::CreateMaybeMessage<::qni::api::ConsoleMessage>(Arena*);
template<> ::qni::api::ConsolePrintButtonData* Arena::CreateMaybeMessage<::qni::api::ConsolePrintButtonData>(Arena*);
template<> ::qni::api::ConsolePrintData* Arena::CreateMaybeMessage<::qni::api::ConsolePrintData>(Arena*);
template<> ::qni::api::ConsoleRequest* Arena::CreateMaybeMessage<::qni::api::ConsoleRequest>(Arena*);
template<> ::qni::api::ConsoleResponse* Arena::CreateMaybeMessage<::qni::api::ConsoleResponse>(Arena*);
template<> ::qni::api::ConsoleSettingItem* Arena::CreateMaybeMessage<::qni::api::ConsoleSettingItem>(Arena*);
template<> ::qni::api::Empty* Arena::CreateMaybeMessage<::qni::api::Empty>(Arena*);
template<> ::qni::api::ErrorResponse* Arena::CreateMaybeMessage<::qni::api::ErrorResponse>(Arena*);
template<> ::qni::api::Font* Arena::CreateMaybeMessage<::qni::api::Font>(Arena*);
template<> ::qni::api::InputRequest* Arena::CreateMaybeMessage<::qni::api::InputRequest>(Arena*);
template<> ::qni::api::InputResponse* Arena::CreateMaybeMessage<::qni::api::InputResponse>(Arena*);
template<> ::qni::api::ProgramCommand* Arena::CreateMaybeMessage<::qni::api::ProgramCommand>(Arena*);
template<> ::qni::api::ProgramCommandArray* Arena::CreateMaybeMessage<::qni::api::ProgramCommandArray>(Arena*);
template<> ::qni::api::ProgramMessage* Arena::CreateMaybeMessage<::qni::api::ProgramMessage>(Arena*);
template<> ::qni::api::ProgramRequest* Arena::CreateMaybeMessage<::qni::api::ProgramRequest>(Arena*);
template<> ::qni::api::ProgramResponse* Arena::CreateMaybeMessage<::qni::api::ProgramResponse>(Arena*);
template<> ::qni::api::StringArray* Arena::CreateMaybeMessage<::qni::api::StringArray>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace qni {
namespace api {

enum FontStyle {
  REGULAR = 0,
  ITALIC = 1,
  BOLD = 2,
  UNDERLINE = 4,
  FontStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FontStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FontStyle_IsValid(int value);
const FontStyle FontStyle_MIN = REGULAR;
const FontStyle FontStyle_MAX = UNDERLINE;
const int FontStyle_ARRAYSIZE = FontStyle_MAX + 1;

const ::google::protobuf::EnumDescriptor* FontStyle_descriptor();
inline const ::std::string& FontStyle_Name(FontStyle value) {
  return ::google::protobuf::internal::NameOfEnum(
    FontStyle_descriptor(), value);
}
inline bool FontStyle_Parse(
    const ::std::string& name, FontStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FontStyle>(
    FontStyle_descriptor(), name, value);
}
enum TextAlign {
  LEFT = 0,
  RIGHT = 1,
  CENTER = 2,
  TextAlign_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TextAlign_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TextAlign_IsValid(int value);
const TextAlign TextAlign_MIN = LEFT;
const TextAlign TextAlign_MAX = CENTER;
const int TextAlign_ARRAYSIZE = TextAlign_MAX + 1;

const ::google::protobuf::EnumDescriptor* TextAlign_descriptor();
inline const ::std::string& TextAlign_Name(TextAlign value) {
  return ::google::protobuf::internal::NameOfEnum(
    TextAlign_descriptor(), value);
}
inline bool TextAlign_Parse(
    const ::std::string& name, TextAlign* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextAlign>(
    TextAlign_descriptor(), name, value);
}
// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qni.api.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StringArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.StringArray) */ {
 public:
  StringArray();
  virtual ~StringArray();

  StringArray(const StringArray& from);

  inline StringArray& operator=(const StringArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringArray(StringArray&& from) noexcept
    : StringArray() {
    *this = ::std::move(from);
  }

  inline StringArray& operator=(StringArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringArray* internal_default_instance() {
    return reinterpret_cast<const StringArray*>(
               &_StringArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StringArray* other);
  friend void swap(StringArray& a, StringArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringArray* New() const final {
    return CreateMaybeMessage<StringArray>(NULL);
  }

  StringArray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringArray>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringArray& from);
  void MergeFrom(const StringArray& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data(int index) const;
  ::std::string* mutable_data(int index);
  void set_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_data(int index, ::std::string&& value);
  #endif
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  ::std::string* add_data();
  void add_data(const ::std::string& value);
  #if LANG_CXX11
  void add_data(::std::string&& value);
  #endif
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // @@protoc_insertion_point(class_scope:qni.api.StringArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ErrorResponse) */ {
 public:
  ErrorResponse();
  virtual ~ErrorResponse();

  ErrorResponse(const ErrorResponse& from);

  inline ErrorResponse& operator=(const ErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorResponse(ErrorResponse&& from) noexcept
    : ErrorResponse() {
    *this = ::std::move(from);
  }

  inline ErrorResponse& operator=(ErrorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorResponse* internal_default_instance() {
    return reinterpret_cast<const ErrorResponse*>(
               &_ErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ErrorResponse* other);
  friend void swap(ErrorResponse& a, ErrorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorResponse* New() const final {
    return CreateMaybeMessage<ErrorResponse>(NULL);
  }

  ErrorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorResponse& from);
  void MergeFrom(const ErrorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // uint32 req_type = 1;
  void clear_req_type();
  static const int kReqTypeFieldNumber = 1;
  ::google::protobuf::uint32 req_type() const;
  void set_req_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:qni.api.ErrorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::uint32 req_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InputRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.InputRequest) */ {
 public:
  InputRequest();
  virtual ~InputRequest();

  InputRequest(const InputRequest& from);

  inline InputRequest& operator=(const InputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputRequest(InputRequest&& from) noexcept
    : InputRequest() {
    *this = ::std::move(from);
  }

  inline InputRequest& operator=(InputRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InputRequest& default_instance();

  enum DataCase {
    kTOUCH = 10,
    kENTER = 11,
    kANYKEY = 12,
    kBOOLEAN = 13,
    kSTR = 20,
    kSTRMAXLEN = 21,
    kSTRSELECT = 22,
    kINT = 30,
    kINTMAXLEN = 31,
    kFLOAT = 40,
    kFLOATMAXLEN = 41,
    kDATE = 50,
    kDATETIME = 51,
    kTIME = 52,
    kCOLOR = 60,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputRequest* internal_default_instance() {
    return reinterpret_cast<const InputRequest*>(
               &_InputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(InputRequest* other);
  friend void swap(InputRequest& a, InputRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputRequest* New() const final {
    return CreateMaybeMessage<InputRequest>(NULL);
  }

  InputRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InputRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InputRequest& from);
  void MergeFrom(const InputRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 expire = 1;
  void clear_expire();
  static const int kExpireFieldNumber = 1;
  ::google::protobuf::uint32 expire() const;
  void set_expire(::google::protobuf::uint32 value);

  // .qni.api.Empty TOUCH = 10;
  bool has_touch() const;
  void clear_touch();
  static const int kTOUCHFieldNumber = 10;
  private:
  const ::qni::api::Empty& _internal_touch() const;
  public:
  const ::qni::api::Empty& touch() const;
  ::qni::api::Empty* release_touch();
  ::qni::api::Empty* mutable_touch();
  void set_allocated_touch(::qni::api::Empty* touch);

  // .qni.api.Empty ENTER = 11;
  bool has_enter() const;
  void clear_enter();
  static const int kENTERFieldNumber = 11;
  private:
  const ::qni::api::Empty& _internal_enter() const;
  public:
  const ::qni::api::Empty& enter() const;
  ::qni::api::Empty* release_enter();
  ::qni::api::Empty* mutable_enter();
  void set_allocated_enter(::qni::api::Empty* enter);

  // .qni.api.Empty ANYKEY = 12;
  bool has_anykey() const;
  void clear_anykey();
  static const int kANYKEYFieldNumber = 12;
  private:
  const ::qni::api::Empty& _internal_anykey() const;
  public:
  const ::qni::api::Empty& anykey() const;
  ::qni::api::Empty* release_anykey();
  ::qni::api::Empty* mutable_anykey();
  void set_allocated_anykey(::qni::api::Empty* anykey);

  // .qni.api.Empty BOOLEAN = 13;
  bool has_boolean() const;
  void clear_boolean();
  static const int kBOOLEANFieldNumber = 13;
  private:
  const ::qni::api::Empty& _internal_boolean() const;
  public:
  const ::qni::api::Empty& boolean() const;
  ::qni::api::Empty* release_boolean();
  ::qni::api::Empty* mutable_boolean();
  void set_allocated_boolean(::qni::api::Empty* boolean);

  // .qni.api.Empty STR = 20;
  bool has_str() const;
  void clear_str();
  static const int kSTRFieldNumber = 20;
  private:
  const ::qni::api::Empty& _internal_str() const;
  public:
  const ::qni::api::Empty& str() const;
  ::qni::api::Empty* release_str();
  ::qni::api::Empty* mutable_str();
  void set_allocated_str(::qni::api::Empty* str);

  // uint32 STR_MAX_LEN = 21;
  private:
  bool has_str_max_len() const;
  public:
  void clear_str_max_len();
  static const int kSTRMAXLENFieldNumber = 21;
  ::google::protobuf::uint32 str_max_len() const;
  void set_str_max_len(::google::protobuf::uint32 value);

  // .qni.api.StringArray STR_SELECT = 22;
  bool has_str_select() const;
  void clear_str_select();
  static const int kSTRSELECTFieldNumber = 22;
  private:
  const ::qni::api::StringArray& _internal_str_select() const;
  public:
  const ::qni::api::StringArray& str_select() const;
  ::qni::api::StringArray* release_str_select();
  ::qni::api::StringArray* mutable_str_select();
  void set_allocated_str_select(::qni::api::StringArray* str_select);

  // .qni.api.Empty INT = 30;
  bool has_int_() const;
  void clear_int_();
  static const int kINTFieldNumber = 30;
  private:
  const ::qni::api::Empty& _internal_int_() const;
  public:
  const ::qni::api::Empty& int_() const;
  ::qni::api::Empty* release_int_();
  ::qni::api::Empty* mutable_int_();
  void set_allocated_int_(::qni::api::Empty* int_);

  // uint32 INT_MAX_LEN = 31;
  private:
  bool has_int_max_len() const;
  public:
  void clear_int_max_len();
  static const int kINTMAXLENFieldNumber = 31;
  ::google::protobuf::uint32 int_max_len() const;
  void set_int_max_len(::google::protobuf::uint32 value);

  // .qni.api.Empty FLOAT = 40;
  bool has_float_() const;
  void clear_float_();
  static const int kFLOATFieldNumber = 40;
  private:
  const ::qni::api::Empty& _internal_float_() const;
  public:
  const ::qni::api::Empty& float_() const;
  ::qni::api::Empty* release_float_();
  ::qni::api::Empty* mutable_float_();
  void set_allocated_float_(::qni::api::Empty* float_);

  // uint32 FLOAT_MAX_LEN = 41;
  private:
  bool has_float_max_len() const;
  public:
  void clear_float_max_len();
  static const int kFLOATMAXLENFieldNumber = 41;
  ::google::protobuf::uint32 float_max_len() const;
  void set_float_max_len(::google::protobuf::uint32 value);

  // .qni.api.Empty DATE = 50;
  bool has_date() const;
  void clear_date();
  static const int kDATEFieldNumber = 50;
  private:
  const ::qni::api::Empty& _internal_date() const;
  public:
  const ::qni::api::Empty& date() const;
  ::qni::api::Empty* release_date();
  ::qni::api::Empty* mutable_date();
  void set_allocated_date(::qni::api::Empty* date);

  // .qni.api.Empty DATETIME = 51;
  bool has_datetime() const;
  void clear_datetime();
  static const int kDATETIMEFieldNumber = 51;
  private:
  const ::qni::api::Empty& _internal_datetime() const;
  public:
  const ::qni::api::Empty& datetime() const;
  ::qni::api::Empty* release_datetime();
  ::qni::api::Empty* mutable_datetime();
  void set_allocated_datetime(::qni::api::Empty* datetime);

  // .qni.api.Empty TIME = 52;
  bool has_time() const;
  void clear_time();
  static const int kTIMEFieldNumber = 52;
  private:
  const ::qni::api::Empty& _internal_time() const;
  public:
  const ::qni::api::Empty& time() const;
  ::qni::api::Empty* release_time();
  ::qni::api::Empty* mutable_time();
  void set_allocated_time(::qni::api::Empty* time);

  // .qni.api.Empty COLOR = 60;
  bool has_color() const;
  void clear_color();
  static const int kCOLORFieldNumber = 60;
  private:
  const ::qni::api::Empty& _internal_color() const;
  public:
  const ::qni::api::Empty& color() const;
  ::qni::api::Empty* release_color();
  ::qni::api::Empty* mutable_color();
  void set_allocated_color(::qni::api::Empty* color);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.InputRequest)
 private:
  void set_has_touch();
  void set_has_enter();
  void set_has_anykey();
  void set_has_boolean();
  void set_has_str();
  void set_has_str_max_len();
  void set_has_str_select();
  void set_has_int_();
  void set_has_int_max_len();
  void set_has_float_();
  void set_has_float_max_len();
  void set_has_date();
  void set_has_datetime();
  void set_has_time();
  void set_has_color();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 expire_;
  union DataUnion {
    DataUnion() {}
    ::qni::api::Empty* touch_;
    ::qni::api::Empty* enter_;
    ::qni::api::Empty* anykey_;
    ::qni::api::Empty* boolean_;
    ::qni::api::Empty* str_;
    ::google::protobuf::uint32 str_max_len_;
    ::qni::api::StringArray* str_select_;
    ::qni::api::Empty* int__;
    ::google::protobuf::uint32 int_max_len_;
    ::qni::api::Empty* float__;
    ::google::protobuf::uint32 float_max_len_;
    ::qni::api::Empty* date_;
    ::qni::api::Empty* datetime_;
    ::qni::api::Empty* time_;
    ::qni::api::Empty* color_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InputResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.InputResponse) */ {
 public:
  InputResponse();
  virtual ~InputResponse();

  InputResponse(const InputResponse& from);

  inline InputResponse& operator=(const InputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputResponse(InputResponse&& from) noexcept
    : InputResponse() {
    *this = ::std::move(from);
  }

  inline InputResponse& operator=(InputResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InputResponse& default_instance();

  enum DataCase {
    kEMPTY = 10,
    kBOOLEAN = 20,
    kSTR = 21,
    kINT = 22,
    kFLOAT = 23,
    kDATE = 30,
    kDATETIME = 31,
    kTIME = 32,
    kCOLOR = 40,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputResponse* internal_default_instance() {
    return reinterpret_cast<const InputResponse*>(
               &_InputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InputResponse* other);
  friend void swap(InputResponse& a, InputResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputResponse* New() const final {
    return CreateMaybeMessage<InputResponse>(NULL);
  }

  InputResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InputResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InputResponse& from);
  void MergeFrom(const InputResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .qni.api.Empty EMPTY = 10;
  bool has_empty() const;
  void clear_empty();
  static const int kEMPTYFieldNumber = 10;
  private:
  const ::qni::api::Empty& _internal_empty() const;
  public:
  const ::qni::api::Empty& empty() const;
  ::qni::api::Empty* release_empty();
  ::qni::api::Empty* mutable_empty();
  void set_allocated_empty(::qni::api::Empty* empty);

  // bool BOOLEAN = 20;
  private:
  bool has_boolean() const;
  public:
  void clear_boolean();
  static const int kBOOLEANFieldNumber = 20;
  bool boolean() const;
  void set_boolean(bool value);

  // string STR = 21;
  private:
  bool has_str() const;
  public:
  void clear_str();
  static const int kSTRFieldNumber = 21;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // int32 INT = 22;
  private:
  bool has_int_() const;
  public:
  void clear_int_();
  static const int kINTFieldNumber = 22;
  ::google::protobuf::int32 int_() const;
  void set_int_(::google::protobuf::int32 value);

  // float FLOAT = 23;
  private:
  bool has_float_() const;
  public:
  void clear_float_();
  static const int kFLOATFieldNumber = 23;
  float float_() const;
  void set_float_(float value);

  // uint64 DATE = 30;
  private:
  bool has_date() const;
  public:
  void clear_date();
  static const int kDATEFieldNumber = 30;
  ::google::protobuf::uint64 date() const;
  void set_date(::google::protobuf::uint64 value);

  // uint64 DATETIME = 31;
  private:
  bool has_datetime() const;
  public:
  void clear_datetime();
  static const int kDATETIMEFieldNumber = 31;
  ::google::protobuf::uint64 datetime() const;
  void set_datetime(::google::protobuf::uint64 value);

  // uint64 TIME = 32;
  private:
  bool has_time() const;
  public:
  void clear_time();
  static const int kTIMEFieldNumber = 32;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // uint32 COLOR = 40;
  private:
  bool has_color() const;
  public:
  void clear_color();
  static const int kCOLORFieldNumber = 40;
  ::google::protobuf::uint32 color() const;
  void set_color(::google::protobuf::uint32 value);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.InputResponse)
 private:
  void set_has_empty();
  void set_has_boolean();
  void set_has_str();
  void set_has_int_();
  void set_has_float_();
  void set_has_date();
  void set_has_datetime();
  void set_has_time();
  void set_has_color();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::qni::api::Empty* empty_;
    bool boolean_;
    ::google::protobuf::internal::ArenaStringPtr str_;
    ::google::protobuf::int32 int__;
    float float__;
    ::google::protobuf::uint64 date_;
    ::google::protobuf::uint64 datetime_;
    ::google::protobuf::uint64 time_;
    ::google::protobuf::uint32 color_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsolePrintButtonData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ConsolePrintButtonData) */ {
 public:
  ConsolePrintButtonData();
  virtual ~ConsolePrintButtonData();

  ConsolePrintButtonData(const ConsolePrintButtonData& from);

  inline ConsolePrintButtonData& operator=(const ConsolePrintButtonData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsolePrintButtonData(ConsolePrintButtonData&& from) noexcept
    : ConsolePrintButtonData() {
    *this = ::std::move(from);
  }

  inline ConsolePrintButtonData& operator=(ConsolePrintButtonData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsolePrintButtonData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsolePrintButtonData* internal_default_instance() {
    return reinterpret_cast<const ConsolePrintButtonData*>(
               &_ConsolePrintButtonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ConsolePrintButtonData* other);
  friend void swap(ConsolePrintButtonData& a, ConsolePrintButtonData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsolePrintButtonData* New() const final {
    return CreateMaybeMessage<ConsolePrintButtonData>(NULL);
  }

  ConsolePrintButtonData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsolePrintButtonData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsolePrintButtonData& from);
  void MergeFrom(const ConsolePrintButtonData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsolePrintButtonData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .qni.api.InputResponse value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  private:
  const ::qni::api::InputResponse& _internal_value() const;
  public:
  const ::qni::api::InputResponse& value() const;
  ::qni::api::InputResponse* release_value();
  ::qni::api::InputResponse* mutable_value();
  void set_allocated_value(::qni::api::InputResponse* value);

  // @@protoc_insertion_point(class_scope:qni.api.ConsolePrintButtonData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::qni::api::InputResponse* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsolePrintData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ConsolePrintData) */ {
 public:
  ConsolePrintData();
  virtual ~ConsolePrintData();

  ConsolePrintData(const ConsolePrintData& from);

  inline ConsolePrintData& operator=(const ConsolePrintData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsolePrintData(ConsolePrintData&& from) noexcept
    : ConsolePrintData() {
    *this = ::std::move(from);
  }

  inline ConsolePrintData& operator=(ConsolePrintData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsolePrintData& default_instance();

  enum DataCase {
    kPRINT = 10,
    kPRINTLINE = 11,
    kPRINTBUTTON = 12,
    kNEWLINE = 20,
    kDELETELINE = 30,
    kCLEARLINE = 31,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsolePrintData* internal_default_instance() {
    return reinterpret_cast<const ConsolePrintData*>(
               &_ConsolePrintData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ConsolePrintData* other);
  friend void swap(ConsolePrintData& a, ConsolePrintData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsolePrintData* New() const final {
    return CreateMaybeMessage<ConsolePrintData>(NULL);
  }

  ConsolePrintData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsolePrintData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsolePrintData& from);
  void MergeFrom(const ConsolePrintData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsolePrintData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PRINT = 10;
  private:
  bool has_print() const;
  public:
  void clear_print();
  static const int kPRINTFieldNumber = 10;
  const ::std::string& print() const;
  void set_print(const ::std::string& value);
  #if LANG_CXX11
  void set_print(::std::string&& value);
  #endif
  void set_print(const char* value);
  void set_print(const char* value, size_t size);
  ::std::string* mutable_print();
  ::std::string* release_print();
  void set_allocated_print(::std::string* print);

  // string PRINT_LINE = 11;
  private:
  bool has_print_line() const;
  public:
  void clear_print_line();
  static const int kPRINTLINEFieldNumber = 11;
  const ::std::string& print_line() const;
  void set_print_line(const ::std::string& value);
  #if LANG_CXX11
  void set_print_line(::std::string&& value);
  #endif
  void set_print_line(const char* value);
  void set_print_line(const char* value, size_t size);
  ::std::string* mutable_print_line();
  ::std::string* release_print_line();
  void set_allocated_print_line(::std::string* print_line);

  // .qni.api.ConsolePrintButtonData PRINT_BUTTON = 12;
  bool has_print_button() const;
  void clear_print_button();
  static const int kPRINTBUTTONFieldNumber = 12;
  private:
  const ::qni::api::ConsolePrintButtonData& _internal_print_button() const;
  public:
  const ::qni::api::ConsolePrintButtonData& print_button() const;
  ::qni::api::ConsolePrintButtonData* release_print_button();
  ::qni::api::ConsolePrintButtonData* mutable_print_button();
  void set_allocated_print_button(::qni::api::ConsolePrintButtonData* print_button);

  // .qni.api.Empty NEW_LINE = 20;
  bool has_new_line() const;
  void clear_new_line();
  static const int kNEWLINEFieldNumber = 20;
  private:
  const ::qni::api::Empty& _internal_new_line() const;
  public:
  const ::qni::api::Empty& new_line() const;
  ::qni::api::Empty* release_new_line();
  ::qni::api::Empty* mutable_new_line();
  void set_allocated_new_line(::qni::api::Empty* new_line);

  // uint32 DELETE_LINE = 30;
  private:
  bool has_delete_line() const;
  public:
  void clear_delete_line();
  static const int kDELETELINEFieldNumber = 30;
  ::google::protobuf::uint32 delete_line() const;
  void set_delete_line(::google::protobuf::uint32 value);

  // .qni.api.Empty CLEAR_LINE = 31;
  bool has_clear_line() const;
  void clear_clear_line();
  static const int kCLEARLINEFieldNumber = 31;
  private:
  const ::qni::api::Empty& _internal_clear_line() const;
  public:
  const ::qni::api::Empty& clear_line() const;
  ::qni::api::Empty* release_clear_line();
  ::qni::api::Empty* mutable_clear_line();
  void set_allocated_clear_line(::qni::api::Empty* clear_line);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.ConsolePrintData)
 private:
  void set_has_print();
  void set_has_print_line();
  void set_has_print_button();
  void set_has_new_line();
  void set_has_delete_line();
  void set_has_clear_line();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::google::protobuf::internal::ArenaStringPtr print_;
    ::google::protobuf::internal::ArenaStringPtr print_line_;
    ::qni::api::ConsolePrintButtonData* print_button_;
    ::qni::api::Empty* new_line_;
    ::google::protobuf::uint32 delete_line_;
    ::qni::api::Empty* clear_line_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Font : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.Font) */ {
 public:
  Font();
  virtual ~Font();

  Font(const Font& from);

  inline Font& operator=(const Font& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Font(Font&& from) noexcept
    : Font() {
    *this = ::std::move(from);
  }

  inline Font& operator=(Font&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Font& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Font* internal_default_instance() {
    return reinterpret_cast<const Font*>(
               &_Font_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Font* other);
  friend void swap(Font& a, Font& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Font* New() const final {
    return CreateMaybeMessage<Font>(NULL);
  }

  Font* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Font>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Font& from);
  void MergeFrom(const Font& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Font* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string font_family = 1;
  void clear_font_family();
  static const int kFontFamilyFieldNumber = 1;
  const ::std::string& font_family() const;
  void set_font_family(const ::std::string& value);
  #if LANG_CXX11
  void set_font_family(::std::string&& value);
  #endif
  void set_font_family(const char* value);
  void set_font_family(const char* value, size_t size);
  ::std::string* mutable_font_family();
  ::std::string* release_font_family();
  void set_allocated_font_family(::std::string* font_family);

  // float font_size = 2;
  void clear_font_size();
  static const int kFontSizeFieldNumber = 2;
  float font_size() const;
  void set_font_size(float value);

  // uint32 font_style = 3;
  void clear_font_style();
  static const int kFontStyleFieldNumber = 3;
  ::google::protobuf::uint32 font_style() const;
  void set_font_style(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:qni.api.Font)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr font_family_;
  float font_size_;
  ::google::protobuf::uint32 font_style_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsoleSettingItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ConsoleSettingItem) */ {
 public:
  ConsoleSettingItem();
  virtual ~ConsoleSettingItem();

  ConsoleSettingItem(const ConsoleSettingItem& from);

  inline ConsoleSettingItem& operator=(const ConsoleSettingItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsoleSettingItem(ConsoleSettingItem&& from) noexcept
    : ConsoleSettingItem() {
    *this = ::std::move(from);
  }

  inline ConsoleSettingItem& operator=(ConsoleSettingItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsoleSettingItem& default_instance();

  enum DataCase {
    kTEXTCOLOR = 10,
    kBACKCOLOR = 11,
    kHIGHLIGHTCOLOR = 12,
    kFONT = 20,
    kTEXTALIGN = 21,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsoleSettingItem* internal_default_instance() {
    return reinterpret_cast<const ConsoleSettingItem*>(
               &_ConsoleSettingItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ConsoleSettingItem* other);
  friend void swap(ConsoleSettingItem& a, ConsoleSettingItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsoleSettingItem* New() const final {
    return CreateMaybeMessage<ConsoleSettingItem>(NULL);
  }

  ConsoleSettingItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsoleSettingItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsoleSettingItem& from);
  void MergeFrom(const ConsoleSettingItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsoleSettingItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 TEXT_COLOR = 10;
  private:
  bool has_text_color() const;
  public:
  void clear_text_color();
  static const int kTEXTCOLORFieldNumber = 10;
  ::google::protobuf::uint32 text_color() const;
  void set_text_color(::google::protobuf::uint32 value);

  // uint32 BACK_COLOR = 11;
  private:
  bool has_back_color() const;
  public:
  void clear_back_color();
  static const int kBACKCOLORFieldNumber = 11;
  ::google::protobuf::uint32 back_color() const;
  void set_back_color(::google::protobuf::uint32 value);

  // uint32 HIGHLIGHT_COLOR = 12;
  private:
  bool has_highlight_color() const;
  public:
  void clear_highlight_color();
  static const int kHIGHLIGHTCOLORFieldNumber = 12;
  ::google::protobuf::uint32 highlight_color() const;
  void set_highlight_color(::google::protobuf::uint32 value);

  // .qni.api.Font FONT = 20;
  bool has_font() const;
  void clear_font();
  static const int kFONTFieldNumber = 20;
  private:
  const ::qni::api::Font& _internal_font() const;
  public:
  const ::qni::api::Font& font() const;
  ::qni::api::Font* release_font();
  ::qni::api::Font* mutable_font();
  void set_allocated_font(::qni::api::Font* font);

  // .qni.api.TextAlign TEXT_ALIGN = 21;
  private:
  bool has_text_align() const;
  public:
  void clear_text_align();
  static const int kTEXTALIGNFieldNumber = 21;
  ::qni::api::TextAlign text_align() const;
  void set_text_align(::qni::api::TextAlign value);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.ConsoleSettingItem)
 private:
  void set_has_text_color();
  void set_has_back_color();
  void set_has_highlight_color();
  void set_has_font();
  void set_has_text_align();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::google::protobuf::uint32 text_color_;
    ::google::protobuf::uint32 back_color_;
    ::google::protobuf::uint32 highlight_color_;
    ::qni::api::Font* font_;
    int text_align_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsoleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ConsoleRequest) */ {
 public:
  ConsoleRequest();
  virtual ~ConsoleRequest();

  ConsoleRequest(const ConsoleRequest& from);

  inline ConsoleRequest& operator=(const ConsoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsoleRequest(ConsoleRequest&& from) noexcept
    : ConsoleRequest() {
    *this = ::std::move(from);
  }

  inline ConsoleRequest& operator=(ConsoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsoleRequest& default_instance();

  enum DataCase {
    kLOADSTATE = 10,
    kSHARESTATE = 11,
    kSHARESTATEOVERWRITE = 12,
    kDELETESTATE = 13,
    kGETSTATE = 20,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsoleRequest* internal_default_instance() {
    return reinterpret_cast<const ConsoleRequest*>(
               &_ConsoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ConsoleRequest* other);
  friend void swap(ConsoleRequest& a, ConsoleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsoleRequest* New() const final {
    return CreateMaybeMessage<ConsoleRequest>(NULL);
  }

  ConsoleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsoleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsoleRequest& from);
  void MergeFrom(const ConsoleRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsoleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string LOAD_STATE = 10;
  private:
  bool has_load_state() const;
  public:
  void clear_load_state();
  static const int kLOADSTATEFieldNumber = 10;
  const ::std::string& load_state() const;
  void set_load_state(const ::std::string& value);
  #if LANG_CXX11
  void set_load_state(::std::string&& value);
  #endif
  void set_load_state(const char* value);
  void set_load_state(const char* value, size_t size);
  ::std::string* mutable_load_state();
  ::std::string* release_load_state();
  void set_allocated_load_state(::std::string* load_state);

  // string SHARE_STATE = 11;
  private:
  bool has_share_state() const;
  public:
  void clear_share_state();
  static const int kSHARESTATEFieldNumber = 11;
  const ::std::string& share_state() const;
  void set_share_state(const ::std::string& value);
  #if LANG_CXX11
  void set_share_state(::std::string&& value);
  #endif
  void set_share_state(const char* value);
  void set_share_state(const char* value, size_t size);
  ::std::string* mutable_share_state();
  ::std::string* release_share_state();
  void set_allocated_share_state(::std::string* share_state);

  // string SHARE_STATE_OVERWRITE = 12;
  private:
  bool has_share_state_overwrite() const;
  public:
  void clear_share_state_overwrite();
  static const int kSHARESTATEOVERWRITEFieldNumber = 12;
  const ::std::string& share_state_overwrite() const;
  void set_share_state_overwrite(const ::std::string& value);
  #if LANG_CXX11
  void set_share_state_overwrite(::std::string&& value);
  #endif
  void set_share_state_overwrite(const char* value);
  void set_share_state_overwrite(const char* value, size_t size);
  ::std::string* mutable_share_state_overwrite();
  ::std::string* release_share_state_overwrite();
  void set_allocated_share_state_overwrite(::std::string* share_state_overwrite);

  // string DELETE_STATE = 13;
  private:
  bool has_delete_state() const;
  public:
  void clear_delete_state();
  static const int kDELETESTATEFieldNumber = 13;
  const ::std::string& delete_state() const;
  void set_delete_state(const ::std::string& value);
  #if LANG_CXX11
  void set_delete_state(::std::string&& value);
  #endif
  void set_delete_state(const char* value);
  void set_delete_state(const char* value, size_t size);
  ::std::string* mutable_delete_state();
  ::std::string* release_delete_state();
  void set_allocated_delete_state(::std::string* delete_state);

  // uint64 GET_STATE = 20;
  private:
  bool has_get_state() const;
  public:
  void clear_get_state();
  static const int kGETSTATEFieldNumber = 20;
  ::google::protobuf::uint64 get_state() const;
  void set_get_state(::google::protobuf::uint64 value);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.ConsoleRequest)
 private:
  void set_has_load_state();
  void set_has_share_state();
  void set_has_share_state_overwrite();
  void set_has_delete_state();
  void set_has_get_state();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::google::protobuf::internal::ArenaStringPtr load_state_;
    ::google::protobuf::internal::ArenaStringPtr share_state_;
    ::google::protobuf::internal::ArenaStringPtr share_state_overwrite_;
    ::google::protobuf::internal::ArenaStringPtr delete_state_;
    ::google::protobuf::uint64 get_state_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsoleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ConsoleResponse) */ {
 public:
  ConsoleResponse();
  virtual ~ConsoleResponse();

  ConsoleResponse(const ConsoleResponse& from);

  inline ConsoleResponse& operator=(const ConsoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsoleResponse(ConsoleResponse&& from) noexcept
    : ConsoleResponse() {
    *this = ::std::move(from);
  }

  inline ConsoleResponse& operator=(ConsoleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsoleResponse& default_instance();

  enum DataCase {
    kOKINPUT = 10,
    kERR = 255,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsoleResponse* internal_default_instance() {
    return reinterpret_cast<const ConsoleResponse*>(
               &_ConsoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ConsoleResponse* other);
  friend void swap(ConsoleResponse& a, ConsoleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsoleResponse* New() const final {
    return CreateMaybeMessage<ConsoleResponse>(NULL);
  }

  ConsoleResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsoleResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsoleResponse& from);
  void MergeFrom(const ConsoleResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsoleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 tag = 1;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  ::google::protobuf::uint32 tag() const;
  void set_tag(::google::protobuf::uint32 value);

  // .qni.api.InputResponse OK_INPUT = 10;
  bool has_ok_input() const;
  void clear_ok_input();
  static const int kOKINPUTFieldNumber = 10;
  private:
  const ::qni::api::InputResponse& _internal_ok_input() const;
  public:
  const ::qni::api::InputResponse& ok_input() const;
  ::qni::api::InputResponse* release_ok_input();
  ::qni::api::InputResponse* mutable_ok_input();
  void set_allocated_ok_input(::qni::api::InputResponse* ok_input);

  // .qni.api.ErrorResponse ERR = 255;
  bool has_err() const;
  void clear_err();
  static const int kERRFieldNumber = 255;
  private:
  const ::qni::api::ErrorResponse& _internal_err() const;
  public:
  const ::qni::api::ErrorResponse& err() const;
  ::qni::api::ErrorResponse* release_err();
  ::qni::api::ErrorResponse* mutable_err();
  void set_allocated_err(::qni::api::ErrorResponse* err);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.ConsoleResponse)
 private:
  void set_has_ok_input();
  void set_has_err();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 tag_;
  union DataUnion {
    DataUnion() {}
    ::qni::api::InputResponse* ok_input_;
    ::qni::api::ErrorResponse* err_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsoleMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ConsoleMessage) */ {
 public:
  ConsoleMessage();
  virtual ~ConsoleMessage();

  ConsoleMessage(const ConsoleMessage& from);

  inline ConsoleMessage& operator=(const ConsoleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsoleMessage(ConsoleMessage&& from) noexcept
    : ConsoleMessage() {
    *this = ::std::move(from);
  }

  inline ConsoleMessage& operator=(ConsoleMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsoleMessage& default_instance();

  enum DataCase {
    kREQ = 10,
    kRES = 11,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsoleMessage* internal_default_instance() {
    return reinterpret_cast<const ConsoleMessage*>(
               &_ConsoleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ConsoleMessage* other);
  friend void swap(ConsoleMessage& a, ConsoleMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsoleMessage* New() const final {
    return CreateMaybeMessage<ConsoleMessage>(NULL);
  }

  ConsoleMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsoleMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsoleMessage& from);
  void MergeFrom(const ConsoleMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsoleMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .qni.api.ConsoleRequest REQ = 10;
  bool has_req() const;
  void clear_req();
  static const int kREQFieldNumber = 10;
  private:
  const ::qni::api::ConsoleRequest& _internal_req() const;
  public:
  const ::qni::api::ConsoleRequest& req() const;
  ::qni::api::ConsoleRequest* release_req();
  ::qni::api::ConsoleRequest* mutable_req();
  void set_allocated_req(::qni::api::ConsoleRequest* req);

  // .qni.api.ConsoleResponse RES = 11;
  bool has_res() const;
  void clear_res();
  static const int kRESFieldNumber = 11;
  private:
  const ::qni::api::ConsoleResponse& _internal_res() const;
  public:
  const ::qni::api::ConsoleResponse& res() const;
  ::qni::api::ConsoleResponse* release_res();
  ::qni::api::ConsoleResponse* mutable_res();
  void set_allocated_res(::qni::api::ConsoleResponse* res);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.ConsoleMessage)
 private:
  void set_has_req();
  void set_has_res();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::qni::api::ConsoleRequest* req_;
    ::qni::api::ConsoleResponse* res_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProgramCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ProgramCommand) */ {
 public:
  ProgramCommand();
  virtual ~ProgramCommand();

  ProgramCommand(const ProgramCommand& from);

  inline ProgramCommand& operator=(const ProgramCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProgramCommand(ProgramCommand&& from) noexcept
    : ProgramCommand() {
    *this = ::std::move(from);
  }

  inline ProgramCommand& operator=(ProgramCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgramCommand& default_instance();

  enum DataCase {
    kPRINT = 10,
    kUPDATESETTING = 11,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramCommand* internal_default_instance() {
    return reinterpret_cast<const ProgramCommand*>(
               &_ProgramCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ProgramCommand* other);
  friend void swap(ProgramCommand& a, ProgramCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProgramCommand* New() const final {
    return CreateMaybeMessage<ProgramCommand>(NULL);
  }

  ProgramCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProgramCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProgramCommand& from);
  void MergeFrom(const ProgramCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .qni.api.ConsolePrintData PRINT = 10;
  bool has_print() const;
  void clear_print();
  static const int kPRINTFieldNumber = 10;
  private:
  const ::qni::api::ConsolePrintData& _internal_print() const;
  public:
  const ::qni::api::ConsolePrintData& print() const;
  ::qni::api::ConsolePrintData* release_print();
  ::qni::api::ConsolePrintData* mutable_print();
  void set_allocated_print(::qni::api::ConsolePrintData* print);

  // .qni.api.ConsoleSettingItem UPDATE_SETTING = 11;
  bool has_update_setting() const;
  void clear_update_setting();
  static const int kUPDATESETTINGFieldNumber = 11;
  private:
  const ::qni::api::ConsoleSettingItem& _internal_update_setting() const;
  public:
  const ::qni::api::ConsoleSettingItem& update_setting() const;
  ::qni::api::ConsoleSettingItem* release_update_setting();
  ::qni::api::ConsoleSettingItem* mutable_update_setting();
  void set_allocated_update_setting(::qni::api::ConsoleSettingItem* update_setting);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.ProgramCommand)
 private:
  void set_has_print();
  void set_has_update_setting();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::qni::api::ConsolePrintData* print_;
    ::qni::api::ConsoleSettingItem* update_setting_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProgramCommandArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ProgramCommandArray) */ {
 public:
  ProgramCommandArray();
  virtual ~ProgramCommandArray();

  ProgramCommandArray(const ProgramCommandArray& from);

  inline ProgramCommandArray& operator=(const ProgramCommandArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProgramCommandArray(ProgramCommandArray&& from) noexcept
    : ProgramCommandArray() {
    *this = ::std::move(from);
  }

  inline ProgramCommandArray& operator=(ProgramCommandArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgramCommandArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramCommandArray* internal_default_instance() {
    return reinterpret_cast<const ProgramCommandArray*>(
               &_ProgramCommandArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ProgramCommandArray* other);
  friend void swap(ProgramCommandArray& a, ProgramCommandArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProgramCommandArray* New() const final {
    return CreateMaybeMessage<ProgramCommandArray>(NULL);
  }

  ProgramCommandArray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProgramCommandArray>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProgramCommandArray& from);
  void MergeFrom(const ProgramCommandArray& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramCommandArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .qni.api.ProgramCommand commands = 1;
  int commands_size() const;
  void clear_commands();
  static const int kCommandsFieldNumber = 1;
  ::qni::api::ProgramCommand* mutable_commands(int index);
  ::google::protobuf::RepeatedPtrField< ::qni::api::ProgramCommand >*
      mutable_commands();
  const ::qni::api::ProgramCommand& commands(int index) const;
  ::qni::api::ProgramCommand* add_commands();
  const ::google::protobuf::RepeatedPtrField< ::qni::api::ProgramCommand >&
      commands() const;

  // @@protoc_insertion_point(class_scope:qni.api.ProgramCommandArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::qni::api::ProgramCommand > commands_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProgramRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ProgramRequest) */ {
 public:
  ProgramRequest();
  virtual ~ProgramRequest();

  ProgramRequest(const ProgramRequest& from);

  inline ProgramRequest& operator=(const ProgramRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProgramRequest(ProgramRequest&& from) noexcept
    : ProgramRequest() {
    *this = ::std::move(from);
  }

  inline ProgramRequest& operator=(ProgramRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgramRequest& default_instance();

  enum DataCase {
    kINPUT = 10,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramRequest* internal_default_instance() {
    return reinterpret_cast<const ProgramRequest*>(
               &_ProgramRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ProgramRequest* other);
  friend void swap(ProgramRequest& a, ProgramRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProgramRequest* New() const final {
    return CreateMaybeMessage<ProgramRequest>(NULL);
  }

  ProgramRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProgramRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProgramRequest& from);
  void MergeFrom(const ProgramRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 tag = 1;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  ::google::protobuf::uint32 tag() const;
  void set_tag(::google::protobuf::uint32 value);

  // .qni.api.InputRequest INPUT = 10;
  bool has_input() const;
  void clear_input();
  static const int kINPUTFieldNumber = 10;
  private:
  const ::qni::api::InputRequest& _internal_input() const;
  public:
  const ::qni::api::InputRequest& input() const;
  ::qni::api::InputRequest* release_input();
  ::qni::api::InputRequest* mutable_input();
  void set_allocated_input(::qni::api::InputRequest* input);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.ProgramRequest)
 private:
  void set_has_input();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 tag_;
  union DataUnion {
    DataUnion() {}
    ::qni::api::InputRequest* input_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProgramResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ProgramResponse) */ {
 public:
  ProgramResponse();
  virtual ~ProgramResponse();

  ProgramResponse(const ProgramResponse& from);

  inline ProgramResponse& operator=(const ProgramResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProgramResponse(ProgramResponse&& from) noexcept
    : ProgramResponse() {
    *this = ::std::move(from);
  }

  inline ProgramResponse& operator=(ProgramResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgramResponse& default_instance();

  enum DataCase {
    kOKLOADSTATE = 10,
    kOKDELETESTATE = 11,
    kOKSHARESTATE = 12,
    kOKGETSTATE = 13,
    kERR = 255,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramResponse* internal_default_instance() {
    return reinterpret_cast<const ProgramResponse*>(
               &_ProgramResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ProgramResponse* other);
  friend void swap(ProgramResponse& a, ProgramResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProgramResponse* New() const final {
    return CreateMaybeMessage<ProgramResponse>(NULL);
  }

  ProgramResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProgramResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProgramResponse& from);
  void MergeFrom(const ProgramResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .qni.api.Empty OK_LOAD_STATE = 10;
  bool has_ok_load_state() const;
  void clear_ok_load_state();
  static const int kOKLOADSTATEFieldNumber = 10;
  private:
  const ::qni::api::Empty& _internal_ok_load_state() const;
  public:
  const ::qni::api::Empty& ok_load_state() const;
  ::qni::api::Empty* release_ok_load_state();
  ::qni::api::Empty* mutable_ok_load_state();
  void set_allocated_ok_load_state(::qni::api::Empty* ok_load_state);

  // .qni.api.Empty OK_DELETE_STATE = 11;
  bool has_ok_delete_state() const;
  void clear_ok_delete_state();
  static const int kOKDELETESTATEFieldNumber = 11;
  private:
  const ::qni::api::Empty& _internal_ok_delete_state() const;
  public:
  const ::qni::api::Empty& ok_delete_state() const;
  ::qni::api::Empty* release_ok_delete_state();
  ::qni::api::Empty* mutable_ok_delete_state();
  void set_allocated_ok_delete_state(::qni::api::Empty* ok_delete_state);

  // string OK_SHARE_STATE = 12;
  private:
  bool has_ok_share_state() const;
  public:
  void clear_ok_share_state();
  static const int kOKSHARESTATEFieldNumber = 12;
  const ::std::string& ok_share_state() const;
  void set_ok_share_state(const ::std::string& value);
  #if LANG_CXX11
  void set_ok_share_state(::std::string&& value);
  #endif
  void set_ok_share_state(const char* value);
  void set_ok_share_state(const char* value, size_t size);
  ::std::string* mutable_ok_share_state();
  ::std::string* release_ok_share_state();
  void set_allocated_ok_share_state(::std::string* ok_share_state);

  // .qni.api.ProgramCommandArray OK_GET_STATE = 13;
  bool has_ok_get_state() const;
  void clear_ok_get_state();
  static const int kOKGETSTATEFieldNumber = 13;
  private:
  const ::qni::api::ProgramCommandArray& _internal_ok_get_state() const;
  public:
  const ::qni::api::ProgramCommandArray& ok_get_state() const;
  ::qni::api::ProgramCommandArray* release_ok_get_state();
  ::qni::api::ProgramCommandArray* mutable_ok_get_state();
  void set_allocated_ok_get_state(::qni::api::ProgramCommandArray* ok_get_state);

  // .qni.api.ErrorResponse ERR = 255;
  bool has_err() const;
  void clear_err();
  static const int kERRFieldNumber = 255;
  private:
  const ::qni::api::ErrorResponse& _internal_err() const;
  public:
  const ::qni::api::ErrorResponse& err() const;
  ::qni::api::ErrorResponse* release_err();
  ::qni::api::ErrorResponse* mutable_err();
  void set_allocated_err(::qni::api::ErrorResponse* err);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.ProgramResponse)
 private:
  void set_has_ok_load_state();
  void set_has_ok_delete_state();
  void set_has_ok_share_state();
  void set_has_ok_get_state();
  void set_has_err();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::qni::api::Empty* ok_load_state_;
    ::qni::api::Empty* ok_delete_state_;
    ::google::protobuf::internal::ArenaStringPtr ok_share_state_;
    ::qni::api::ProgramCommandArray* ok_get_state_;
    ::qni::api::ErrorResponse* err_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProgramMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qni.api.ProgramMessage) */ {
 public:
  ProgramMessage();
  virtual ~ProgramMessage();

  ProgramMessage(const ProgramMessage& from);

  inline ProgramMessage& operator=(const ProgramMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProgramMessage(ProgramMessage&& from) noexcept
    : ProgramMessage() {
    *this = ::std::move(from);
  }

  inline ProgramMessage& operator=(ProgramMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgramMessage& default_instance();

  enum DataCase {
    kREQ = 10,
    kRES = 11,
    kACCEPTRES = 12,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramMessage* internal_default_instance() {
    return reinterpret_cast<const ProgramMessage*>(
               &_ProgramMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ProgramMessage* other);
  friend void swap(ProgramMessage& a, ProgramMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProgramMessage* New() const final {
    return CreateMaybeMessage<ProgramMessage>(NULL);
  }

  ProgramMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProgramMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProgramMessage& from);
  void MergeFrom(const ProgramMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .qni.api.ProgramRequest REQ = 10;
  bool has_req() const;
  void clear_req();
  static const int kREQFieldNumber = 10;
  private:
  const ::qni::api::ProgramRequest& _internal_req() const;
  public:
  const ::qni::api::ProgramRequest& req() const;
  ::qni::api::ProgramRequest* release_req();
  ::qni::api::ProgramRequest* mutable_req();
  void set_allocated_req(::qni::api::ProgramRequest* req);

  // .qni.api.ProgramResponse RES = 11;
  bool has_res() const;
  void clear_res();
  static const int kRESFieldNumber = 11;
  private:
  const ::qni::api::ProgramResponse& _internal_res() const;
  public:
  const ::qni::api::ProgramResponse& res() const;
  ::qni::api::ProgramResponse* release_res();
  ::qni::api::ProgramResponse* mutable_res();
  void set_allocated_res(::qni::api::ProgramResponse* res);

  // uint32 ACCEPT_RES = 12;
  private:
  bool has_accept_res() const;
  public:
  void clear_accept_res();
  static const int kACCEPTRESFieldNumber = 12;
  ::google::protobuf::uint32 accept_res() const;
  void set_accept_res(::google::protobuf::uint32 value);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:qni.api.ProgramMessage)
 private:
  void set_has_req();
  void set_has_res();
  void set_has_accept_res();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::qni::api::ProgramRequest* req_;
    ::qni::api::ProgramResponse* res_;
    ::google::protobuf::uint32 accept_res_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_qni_2dapi_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// StringArray

// repeated string data = 1;
inline int StringArray::data_size() const {
  return data_.size();
}
inline void StringArray::clear_data() {
  data_.Clear();
}
inline const ::std::string& StringArray::data(int index) const {
  // @@protoc_insertion_point(field_get:qni.api.StringArray.data)
  return data_.Get(index);
}
inline ::std::string* StringArray::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:qni.api.StringArray.data)
  return data_.Mutable(index);
}
inline void StringArray::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qni.api.StringArray.data)
  data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringArray::set_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:qni.api.StringArray.data)
  data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringArray::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:qni.api.StringArray.data)
}
inline void StringArray::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qni.api.StringArray.data)
}
inline ::std::string* StringArray::add_data() {
  // @@protoc_insertion_point(field_add_mutable:qni.api.StringArray.data)
  return data_.Add();
}
inline void StringArray::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:qni.api.StringArray.data)
}
#if LANG_CXX11
inline void StringArray::add_data(::std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:qni.api.StringArray.data)
}
#endif
inline void StringArray::add_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:qni.api.StringArray.data)
}
inline void StringArray::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:qni.api.StringArray.data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringArray::data() const {
  // @@protoc_insertion_point(field_list:qni.api.StringArray.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringArray::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:qni.api.StringArray.data)
  return &data_;
}

// -------------------------------------------------------------------

// ErrorResponse

// uint32 req_type = 1;
inline void ErrorResponse::clear_req_type() {
  req_type_ = 0u;
}
inline ::google::protobuf::uint32 ErrorResponse::req_type() const {
  // @@protoc_insertion_point(field_get:qni.api.ErrorResponse.req_type)
  return req_type_;
}
inline void ErrorResponse::set_req_type(::google::protobuf::uint32 value) {
  
  req_type_ = value;
  // @@protoc_insertion_point(field_set:qni.api.ErrorResponse.req_type)
}

// string reason = 2;
inline void ErrorResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorResponse::reason() const {
  // @@protoc_insertion_point(field_get:qni.api.ErrorResponse.reason)
  return reason_.GetNoArena();
}
inline void ErrorResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.ErrorResponse.reason)
}
#if LANG_CXX11
inline void ErrorResponse::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.ErrorResponse.reason)
}
#endif
inline void ErrorResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.ErrorResponse.reason)
}
inline void ErrorResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.ErrorResponse.reason)
}
inline ::std::string* ErrorResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:qni.api.ErrorResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorResponse::release_reason() {
  // @@protoc_insertion_point(field_release:qni.api.ErrorResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:qni.api.ErrorResponse.reason)
}

// -------------------------------------------------------------------

// InputRequest

// uint32 expire = 1;
inline void InputRequest::clear_expire() {
  expire_ = 0u;
}
inline ::google::protobuf::uint32 InputRequest::expire() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.expire)
  return expire_;
}
inline void InputRequest::set_expire(::google::protobuf::uint32 value) {
  
  expire_ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputRequest.expire)
}

// .qni.api.Empty TOUCH = 10;
inline bool InputRequest::has_touch() const {
  return data_case() == kTOUCH;
}
inline void InputRequest::set_has_touch() {
  _oneof_case_[0] = kTOUCH;
}
inline void InputRequest::clear_touch() {
  if (has_touch()) {
    delete data_.touch_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_touch() const {
  return *data_.touch_;
}
inline ::qni::api::Empty* InputRequest::release_touch() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.TOUCH)
  if (has_touch()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.touch_;
    data_.touch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::touch() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.TOUCH)
  return has_touch()
      ? *data_.touch_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_touch() {
  if (!has_touch()) {
    clear_data();
    set_has_touch();
    data_.touch_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.TOUCH)
  return data_.touch_;
}

// .qni.api.Empty ENTER = 11;
inline bool InputRequest::has_enter() const {
  return data_case() == kENTER;
}
inline void InputRequest::set_has_enter() {
  _oneof_case_[0] = kENTER;
}
inline void InputRequest::clear_enter() {
  if (has_enter()) {
    delete data_.enter_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_enter() const {
  return *data_.enter_;
}
inline ::qni::api::Empty* InputRequest::release_enter() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.ENTER)
  if (has_enter()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.enter_;
    data_.enter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::enter() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.ENTER)
  return has_enter()
      ? *data_.enter_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_enter() {
  if (!has_enter()) {
    clear_data();
    set_has_enter();
    data_.enter_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.ENTER)
  return data_.enter_;
}

// .qni.api.Empty ANYKEY = 12;
inline bool InputRequest::has_anykey() const {
  return data_case() == kANYKEY;
}
inline void InputRequest::set_has_anykey() {
  _oneof_case_[0] = kANYKEY;
}
inline void InputRequest::clear_anykey() {
  if (has_anykey()) {
    delete data_.anykey_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_anykey() const {
  return *data_.anykey_;
}
inline ::qni::api::Empty* InputRequest::release_anykey() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.ANYKEY)
  if (has_anykey()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.anykey_;
    data_.anykey_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::anykey() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.ANYKEY)
  return has_anykey()
      ? *data_.anykey_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_anykey() {
  if (!has_anykey()) {
    clear_data();
    set_has_anykey();
    data_.anykey_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.ANYKEY)
  return data_.anykey_;
}

// .qni.api.Empty BOOLEAN = 13;
inline bool InputRequest::has_boolean() const {
  return data_case() == kBOOLEAN;
}
inline void InputRequest::set_has_boolean() {
  _oneof_case_[0] = kBOOLEAN;
}
inline void InputRequest::clear_boolean() {
  if (has_boolean()) {
    delete data_.boolean_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_boolean() const {
  return *data_.boolean_;
}
inline ::qni::api::Empty* InputRequest::release_boolean() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.BOOLEAN)
  if (has_boolean()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.boolean_;
    data_.boolean_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::boolean() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.BOOLEAN)
  return has_boolean()
      ? *data_.boolean_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_boolean() {
  if (!has_boolean()) {
    clear_data();
    set_has_boolean();
    data_.boolean_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.BOOLEAN)
  return data_.boolean_;
}

// .qni.api.Empty STR = 20;
inline bool InputRequest::has_str() const {
  return data_case() == kSTR;
}
inline void InputRequest::set_has_str() {
  _oneof_case_[0] = kSTR;
}
inline void InputRequest::clear_str() {
  if (has_str()) {
    delete data_.str_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_str() const {
  return *data_.str_;
}
inline ::qni::api::Empty* InputRequest::release_str() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.STR)
  if (has_str()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.str_;
    data_.str_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::str() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.STR)
  return has_str()
      ? *data_.str_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_str() {
  if (!has_str()) {
    clear_data();
    set_has_str();
    data_.str_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.STR)
  return data_.str_;
}

// uint32 STR_MAX_LEN = 21;
inline bool InputRequest::has_str_max_len() const {
  return data_case() == kSTRMAXLEN;
}
inline void InputRequest::set_has_str_max_len() {
  _oneof_case_[0] = kSTRMAXLEN;
}
inline void InputRequest::clear_str_max_len() {
  if (has_str_max_len()) {
    data_.str_max_len_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 InputRequest::str_max_len() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.STR_MAX_LEN)
  if (has_str_max_len()) {
    return data_.str_max_len_;
  }
  return 0u;
}
inline void InputRequest::set_str_max_len(::google::protobuf::uint32 value) {
  if (!has_str_max_len()) {
    clear_data();
    set_has_str_max_len();
  }
  data_.str_max_len_ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputRequest.STR_MAX_LEN)
}

// .qni.api.StringArray STR_SELECT = 22;
inline bool InputRequest::has_str_select() const {
  return data_case() == kSTRSELECT;
}
inline void InputRequest::set_has_str_select() {
  _oneof_case_[0] = kSTRSELECT;
}
inline void InputRequest::clear_str_select() {
  if (has_str_select()) {
    delete data_.str_select_;
    clear_has_data();
  }
}
inline const ::qni::api::StringArray& InputRequest::_internal_str_select() const {
  return *data_.str_select_;
}
inline ::qni::api::StringArray* InputRequest::release_str_select() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.STR_SELECT)
  if (has_str_select()) {
    clear_has_data();
      ::qni::api::StringArray* temp = data_.str_select_;
    data_.str_select_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::StringArray& InputRequest::str_select() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.STR_SELECT)
  return has_str_select()
      ? *data_.str_select_
      : *reinterpret_cast< ::qni::api::StringArray*>(&::qni::api::_StringArray_default_instance_);
}
inline ::qni::api::StringArray* InputRequest::mutable_str_select() {
  if (!has_str_select()) {
    clear_data();
    set_has_str_select();
    data_.str_select_ = CreateMaybeMessage< ::qni::api::StringArray >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.STR_SELECT)
  return data_.str_select_;
}

// .qni.api.Empty INT = 30;
inline bool InputRequest::has_int_() const {
  return data_case() == kINT;
}
inline void InputRequest::set_has_int_() {
  _oneof_case_[0] = kINT;
}
inline void InputRequest::clear_int_() {
  if (has_int_()) {
    delete data_.int__;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_int_() const {
  return *data_.int__;
}
inline ::qni::api::Empty* InputRequest::release_int_() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.INT)
  if (has_int_()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.int__;
    data_.int__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::int_() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.INT)
  return has_int_()
      ? *data_.int__
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_int_() {
  if (!has_int_()) {
    clear_data();
    set_has_int_();
    data_.int__ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.INT)
  return data_.int__;
}

// uint32 INT_MAX_LEN = 31;
inline bool InputRequest::has_int_max_len() const {
  return data_case() == kINTMAXLEN;
}
inline void InputRequest::set_has_int_max_len() {
  _oneof_case_[0] = kINTMAXLEN;
}
inline void InputRequest::clear_int_max_len() {
  if (has_int_max_len()) {
    data_.int_max_len_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 InputRequest::int_max_len() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.INT_MAX_LEN)
  if (has_int_max_len()) {
    return data_.int_max_len_;
  }
  return 0u;
}
inline void InputRequest::set_int_max_len(::google::protobuf::uint32 value) {
  if (!has_int_max_len()) {
    clear_data();
    set_has_int_max_len();
  }
  data_.int_max_len_ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputRequest.INT_MAX_LEN)
}

// .qni.api.Empty FLOAT = 40;
inline bool InputRequest::has_float_() const {
  return data_case() == kFLOAT;
}
inline void InputRequest::set_has_float_() {
  _oneof_case_[0] = kFLOAT;
}
inline void InputRequest::clear_float_() {
  if (has_float_()) {
    delete data_.float__;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_float_() const {
  return *data_.float__;
}
inline ::qni::api::Empty* InputRequest::release_float_() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.FLOAT)
  if (has_float_()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.float__;
    data_.float__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::float_() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.FLOAT)
  return has_float_()
      ? *data_.float__
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_float_() {
  if (!has_float_()) {
    clear_data();
    set_has_float_();
    data_.float__ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.FLOAT)
  return data_.float__;
}

// uint32 FLOAT_MAX_LEN = 41;
inline bool InputRequest::has_float_max_len() const {
  return data_case() == kFLOATMAXLEN;
}
inline void InputRequest::set_has_float_max_len() {
  _oneof_case_[0] = kFLOATMAXLEN;
}
inline void InputRequest::clear_float_max_len() {
  if (has_float_max_len()) {
    data_.float_max_len_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 InputRequest::float_max_len() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.FLOAT_MAX_LEN)
  if (has_float_max_len()) {
    return data_.float_max_len_;
  }
  return 0u;
}
inline void InputRequest::set_float_max_len(::google::protobuf::uint32 value) {
  if (!has_float_max_len()) {
    clear_data();
    set_has_float_max_len();
  }
  data_.float_max_len_ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputRequest.FLOAT_MAX_LEN)
}

// .qni.api.Empty DATE = 50;
inline bool InputRequest::has_date() const {
  return data_case() == kDATE;
}
inline void InputRequest::set_has_date() {
  _oneof_case_[0] = kDATE;
}
inline void InputRequest::clear_date() {
  if (has_date()) {
    delete data_.date_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_date() const {
  return *data_.date_;
}
inline ::qni::api::Empty* InputRequest::release_date() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.DATE)
  if (has_date()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.date_;
    data_.date_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::date() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.DATE)
  return has_date()
      ? *data_.date_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_date() {
  if (!has_date()) {
    clear_data();
    set_has_date();
    data_.date_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.DATE)
  return data_.date_;
}

// .qni.api.Empty DATETIME = 51;
inline bool InputRequest::has_datetime() const {
  return data_case() == kDATETIME;
}
inline void InputRequest::set_has_datetime() {
  _oneof_case_[0] = kDATETIME;
}
inline void InputRequest::clear_datetime() {
  if (has_datetime()) {
    delete data_.datetime_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_datetime() const {
  return *data_.datetime_;
}
inline ::qni::api::Empty* InputRequest::release_datetime() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.DATETIME)
  if (has_datetime()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.datetime_;
    data_.datetime_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::datetime() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.DATETIME)
  return has_datetime()
      ? *data_.datetime_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_datetime() {
  if (!has_datetime()) {
    clear_data();
    set_has_datetime();
    data_.datetime_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.DATETIME)
  return data_.datetime_;
}

// .qni.api.Empty TIME = 52;
inline bool InputRequest::has_time() const {
  return data_case() == kTIME;
}
inline void InputRequest::set_has_time() {
  _oneof_case_[0] = kTIME;
}
inline void InputRequest::clear_time() {
  if (has_time()) {
    delete data_.time_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_time() const {
  return *data_.time_;
}
inline ::qni::api::Empty* InputRequest::release_time() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.TIME)
  if (has_time()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.time_;
    data_.time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::time() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.TIME)
  return has_time()
      ? *data_.time_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_time() {
  if (!has_time()) {
    clear_data();
    set_has_time();
    data_.time_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.TIME)
  return data_.time_;
}

// .qni.api.Empty COLOR = 60;
inline bool InputRequest::has_color() const {
  return data_case() == kCOLOR;
}
inline void InputRequest::set_has_color() {
  _oneof_case_[0] = kCOLOR;
}
inline void InputRequest::clear_color() {
  if (has_color()) {
    delete data_.color_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputRequest::_internal_color() const {
  return *data_.color_;
}
inline ::qni::api::Empty* InputRequest::release_color() {
  // @@protoc_insertion_point(field_release:qni.api.InputRequest.COLOR)
  if (has_color()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.color_;
    data_.color_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputRequest::color() const {
  // @@protoc_insertion_point(field_get:qni.api.InputRequest.COLOR)
  return has_color()
      ? *data_.color_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputRequest::mutable_color() {
  if (!has_color()) {
    clear_data();
    set_has_color();
    data_.color_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputRequest.COLOR)
  return data_.color_;
}

inline bool InputRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void InputRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline InputRequest::DataCase InputRequest::data_case() const {
  return InputRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InputResponse

// .qni.api.Empty EMPTY = 10;
inline bool InputResponse::has_empty() const {
  return data_case() == kEMPTY;
}
inline void InputResponse::set_has_empty() {
  _oneof_case_[0] = kEMPTY;
}
inline void InputResponse::clear_empty() {
  if (has_empty()) {
    delete data_.empty_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& InputResponse::_internal_empty() const {
  return *data_.empty_;
}
inline ::qni::api::Empty* InputResponse::release_empty() {
  // @@protoc_insertion_point(field_release:qni.api.InputResponse.EMPTY)
  if (has_empty()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.empty_;
    data_.empty_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& InputResponse::empty() const {
  // @@protoc_insertion_point(field_get:qni.api.InputResponse.EMPTY)
  return has_empty()
      ? *data_.empty_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* InputResponse::mutable_empty() {
  if (!has_empty()) {
    clear_data();
    set_has_empty();
    data_.empty_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputResponse.EMPTY)
  return data_.empty_;
}

// bool BOOLEAN = 20;
inline bool InputResponse::has_boolean() const {
  return data_case() == kBOOLEAN;
}
inline void InputResponse::set_has_boolean() {
  _oneof_case_[0] = kBOOLEAN;
}
inline void InputResponse::clear_boolean() {
  if (has_boolean()) {
    data_.boolean_ = false;
    clear_has_data();
  }
}
inline bool InputResponse::boolean() const {
  // @@protoc_insertion_point(field_get:qni.api.InputResponse.BOOLEAN)
  if (has_boolean()) {
    return data_.boolean_;
  }
  return false;
}
inline void InputResponse::set_boolean(bool value) {
  if (!has_boolean()) {
    clear_data();
    set_has_boolean();
  }
  data_.boolean_ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputResponse.BOOLEAN)
}

// string STR = 21;
inline bool InputResponse::has_str() const {
  return data_case() == kSTR;
}
inline void InputResponse::set_has_str() {
  _oneof_case_[0] = kSTR;
}
inline void InputResponse::clear_str() {
  if (has_str()) {
    data_.str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& InputResponse::str() const {
  // @@protoc_insertion_point(field_get:qni.api.InputResponse.STR)
  if (has_str()) {
    return data_.str_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void InputResponse::set_str(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qni.api.InputResponse.STR)
  if (!has_str()) {
    clear_data();
    set_has_str();
    data_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.InputResponse.STR)
}
#if LANG_CXX11
inline void InputResponse::set_str(::std::string&& value) {
  // @@protoc_insertion_point(field_set:qni.api.InputResponse.STR)
  if (!has_str()) {
    clear_data();
    set_has_str();
    data_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.InputResponse.STR)
}
#endif
inline void InputResponse::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_str()) {
    clear_data();
    set_has_str();
    data_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.InputResponse.STR)
}
inline void InputResponse::set_str(const char* value, size_t size) {
  if (!has_str()) {
    clear_data();
    set_has_str();
    data_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.InputResponse.STR)
}
inline ::std::string* InputResponse::mutable_str() {
  if (!has_str()) {
    clear_data();
    set_has_str();
    data_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.InputResponse.STR)
  return data_.str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InputResponse::release_str() {
  // @@protoc_insertion_point(field_release:qni.api.InputResponse.STR)
  if (has_str()) {
    clear_has_data();
    return data_.str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void InputResponse::set_allocated_str(::std::string* str) {
  if (!has_str()) {
    data_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (str != NULL) {
    set_has_str();
    data_.str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  }
  // @@protoc_insertion_point(field_set_allocated:qni.api.InputResponse.STR)
}

// int32 INT = 22;
inline bool InputResponse::has_int_() const {
  return data_case() == kINT;
}
inline void InputResponse::set_has_int_() {
  _oneof_case_[0] = kINT;
}
inline void InputResponse::clear_int_() {
  if (has_int_()) {
    data_.int__ = 0;
    clear_has_data();
  }
}
inline ::google::protobuf::int32 InputResponse::int_() const {
  // @@protoc_insertion_point(field_get:qni.api.InputResponse.INT)
  if (has_int_()) {
    return data_.int__;
  }
  return 0;
}
inline void InputResponse::set_int_(::google::protobuf::int32 value) {
  if (!has_int_()) {
    clear_data();
    set_has_int_();
  }
  data_.int__ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputResponse.INT)
}

// float FLOAT = 23;
inline bool InputResponse::has_float_() const {
  return data_case() == kFLOAT;
}
inline void InputResponse::set_has_float_() {
  _oneof_case_[0] = kFLOAT;
}
inline void InputResponse::clear_float_() {
  if (has_float_()) {
    data_.float__ = 0;
    clear_has_data();
  }
}
inline float InputResponse::float_() const {
  // @@protoc_insertion_point(field_get:qni.api.InputResponse.FLOAT)
  if (has_float_()) {
    return data_.float__;
  }
  return 0;
}
inline void InputResponse::set_float_(float value) {
  if (!has_float_()) {
    clear_data();
    set_has_float_();
  }
  data_.float__ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputResponse.FLOAT)
}

// uint64 DATE = 30;
inline bool InputResponse::has_date() const {
  return data_case() == kDATE;
}
inline void InputResponse::set_has_date() {
  _oneof_case_[0] = kDATE;
}
inline void InputResponse::clear_date() {
  if (has_date()) {
    data_.date_ = GOOGLE_ULONGLONG(0);
    clear_has_data();
  }
}
inline ::google::protobuf::uint64 InputResponse::date() const {
  // @@protoc_insertion_point(field_get:qni.api.InputResponse.DATE)
  if (has_date()) {
    return data_.date_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void InputResponse::set_date(::google::protobuf::uint64 value) {
  if (!has_date()) {
    clear_data();
    set_has_date();
  }
  data_.date_ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputResponse.DATE)
}

// uint64 DATETIME = 31;
inline bool InputResponse::has_datetime() const {
  return data_case() == kDATETIME;
}
inline void InputResponse::set_has_datetime() {
  _oneof_case_[0] = kDATETIME;
}
inline void InputResponse::clear_datetime() {
  if (has_datetime()) {
    data_.datetime_ = GOOGLE_ULONGLONG(0);
    clear_has_data();
  }
}
inline ::google::protobuf::uint64 InputResponse::datetime() const {
  // @@protoc_insertion_point(field_get:qni.api.InputResponse.DATETIME)
  if (has_datetime()) {
    return data_.datetime_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void InputResponse::set_datetime(::google::protobuf::uint64 value) {
  if (!has_datetime()) {
    clear_data();
    set_has_datetime();
  }
  data_.datetime_ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputResponse.DATETIME)
}

// uint64 TIME = 32;
inline bool InputResponse::has_time() const {
  return data_case() == kTIME;
}
inline void InputResponse::set_has_time() {
  _oneof_case_[0] = kTIME;
}
inline void InputResponse::clear_time() {
  if (has_time()) {
    data_.time_ = GOOGLE_ULONGLONG(0);
    clear_has_data();
  }
}
inline ::google::protobuf::uint64 InputResponse::time() const {
  // @@protoc_insertion_point(field_get:qni.api.InputResponse.TIME)
  if (has_time()) {
    return data_.time_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void InputResponse::set_time(::google::protobuf::uint64 value) {
  if (!has_time()) {
    clear_data();
    set_has_time();
  }
  data_.time_ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputResponse.TIME)
}

// uint32 COLOR = 40;
inline bool InputResponse::has_color() const {
  return data_case() == kCOLOR;
}
inline void InputResponse::set_has_color() {
  _oneof_case_[0] = kCOLOR;
}
inline void InputResponse::clear_color() {
  if (has_color()) {
    data_.color_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 InputResponse::color() const {
  // @@protoc_insertion_point(field_get:qni.api.InputResponse.COLOR)
  if (has_color()) {
    return data_.color_;
  }
  return 0u;
}
inline void InputResponse::set_color(::google::protobuf::uint32 value) {
  if (!has_color()) {
    clear_data();
    set_has_color();
  }
  data_.color_ = value;
  // @@protoc_insertion_point(field_set:qni.api.InputResponse.COLOR)
}

inline bool InputResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void InputResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline InputResponse::DataCase InputResponse::data_case() const {
  return InputResponse::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConsolePrintButtonData

// .qni.api.InputResponse value = 1;
inline bool ConsolePrintButtonData::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ConsolePrintButtonData::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::qni::api::InputResponse& ConsolePrintButtonData::_internal_value() const {
  return *value_;
}
inline const ::qni::api::InputResponse& ConsolePrintButtonData::value() const {
  const ::qni::api::InputResponse* p = value_;
  // @@protoc_insertion_point(field_get:qni.api.ConsolePrintButtonData.value)
  return p != NULL ? *p : *reinterpret_cast<const ::qni::api::InputResponse*>(
      &::qni::api::_InputResponse_default_instance_);
}
inline ::qni::api::InputResponse* ConsolePrintButtonData::release_value() {
  // @@protoc_insertion_point(field_release:qni.api.ConsolePrintButtonData.value)
  
  ::qni::api::InputResponse* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::qni::api::InputResponse* ConsolePrintButtonData::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::qni::api::InputResponse>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsolePrintButtonData.value)
  return value_;
}
inline void ConsolePrintButtonData::set_allocated_value(::qni::api::InputResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:qni.api.ConsolePrintButtonData.value)
}

// string text = 2;
inline void ConsolePrintButtonData::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConsolePrintButtonData::text() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsolePrintButtonData.text)
  return text_.GetNoArena();
}
inline void ConsolePrintButtonData::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.ConsolePrintButtonData.text)
}
#if LANG_CXX11
inline void ConsolePrintButtonData::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.ConsolePrintButtonData.text)
}
#endif
inline void ConsolePrintButtonData::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.ConsolePrintButtonData.text)
}
inline void ConsolePrintButtonData::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.ConsolePrintButtonData.text)
}
inline ::std::string* ConsolePrintButtonData::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:qni.api.ConsolePrintButtonData.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsolePrintButtonData::release_text() {
  // @@protoc_insertion_point(field_release:qni.api.ConsolePrintButtonData.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsolePrintButtonData::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:qni.api.ConsolePrintButtonData.text)
}

// -------------------------------------------------------------------

// ConsolePrintData

// string PRINT = 10;
inline bool ConsolePrintData::has_print() const {
  return data_case() == kPRINT;
}
inline void ConsolePrintData::set_has_print() {
  _oneof_case_[0] = kPRINT;
}
inline void ConsolePrintData::clear_print() {
  if (has_print()) {
    data_.print_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& ConsolePrintData::print() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsolePrintData.PRINT)
  if (has_print()) {
    return data_.print_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ConsolePrintData::set_print(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsolePrintData.PRINT)
  if (!has_print()) {
    clear_data();
    set_has_print();
    data_.print_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.print_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.ConsolePrintData.PRINT)
}
#if LANG_CXX11
inline void ConsolePrintData::set_print(::std::string&& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsolePrintData.PRINT)
  if (!has_print()) {
    clear_data();
    set_has_print();
    data_.print_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.print_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.ConsolePrintData.PRINT)
}
#endif
inline void ConsolePrintData::set_print(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_print()) {
    clear_data();
    set_has_print();
    data_.print_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.print_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.ConsolePrintData.PRINT)
}
inline void ConsolePrintData::set_print(const char* value, size_t size) {
  if (!has_print()) {
    clear_data();
    set_has_print();
    data_.print_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.print_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.ConsolePrintData.PRINT)
}
inline ::std::string* ConsolePrintData::mutable_print() {
  if (!has_print()) {
    clear_data();
    set_has_print();
    data_.print_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsolePrintData.PRINT)
  return data_.print_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsolePrintData::release_print() {
  // @@protoc_insertion_point(field_release:qni.api.ConsolePrintData.PRINT)
  if (has_print()) {
    clear_has_data();
    return data_.print_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ConsolePrintData::set_allocated_print(::std::string* print) {
  if (!has_print()) {
    data_.print_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (print != NULL) {
    set_has_print();
    data_.print_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), print);
  }
  // @@protoc_insertion_point(field_set_allocated:qni.api.ConsolePrintData.PRINT)
}

// string PRINT_LINE = 11;
inline bool ConsolePrintData::has_print_line() const {
  return data_case() == kPRINTLINE;
}
inline void ConsolePrintData::set_has_print_line() {
  _oneof_case_[0] = kPRINTLINE;
}
inline void ConsolePrintData::clear_print_line() {
  if (has_print_line()) {
    data_.print_line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& ConsolePrintData::print_line() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsolePrintData.PRINT_LINE)
  if (has_print_line()) {
    return data_.print_line_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ConsolePrintData::set_print_line(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsolePrintData.PRINT_LINE)
  if (!has_print_line()) {
    clear_data();
    set_has_print_line();
    data_.print_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.print_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.ConsolePrintData.PRINT_LINE)
}
#if LANG_CXX11
inline void ConsolePrintData::set_print_line(::std::string&& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsolePrintData.PRINT_LINE)
  if (!has_print_line()) {
    clear_data();
    set_has_print_line();
    data_.print_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.print_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.ConsolePrintData.PRINT_LINE)
}
#endif
inline void ConsolePrintData::set_print_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_print_line()) {
    clear_data();
    set_has_print_line();
    data_.print_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.print_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.ConsolePrintData.PRINT_LINE)
}
inline void ConsolePrintData::set_print_line(const char* value, size_t size) {
  if (!has_print_line()) {
    clear_data();
    set_has_print_line();
    data_.print_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.print_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.ConsolePrintData.PRINT_LINE)
}
inline ::std::string* ConsolePrintData::mutable_print_line() {
  if (!has_print_line()) {
    clear_data();
    set_has_print_line();
    data_.print_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsolePrintData.PRINT_LINE)
  return data_.print_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsolePrintData::release_print_line() {
  // @@protoc_insertion_point(field_release:qni.api.ConsolePrintData.PRINT_LINE)
  if (has_print_line()) {
    clear_has_data();
    return data_.print_line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ConsolePrintData::set_allocated_print_line(::std::string* print_line) {
  if (!has_print_line()) {
    data_.print_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (print_line != NULL) {
    set_has_print_line();
    data_.print_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), print_line);
  }
  // @@protoc_insertion_point(field_set_allocated:qni.api.ConsolePrintData.PRINT_LINE)
}

// .qni.api.ConsolePrintButtonData PRINT_BUTTON = 12;
inline bool ConsolePrintData::has_print_button() const {
  return data_case() == kPRINTBUTTON;
}
inline void ConsolePrintData::set_has_print_button() {
  _oneof_case_[0] = kPRINTBUTTON;
}
inline void ConsolePrintData::clear_print_button() {
  if (has_print_button()) {
    delete data_.print_button_;
    clear_has_data();
  }
}
inline const ::qni::api::ConsolePrintButtonData& ConsolePrintData::_internal_print_button() const {
  return *data_.print_button_;
}
inline ::qni::api::ConsolePrintButtonData* ConsolePrintData::release_print_button() {
  // @@protoc_insertion_point(field_release:qni.api.ConsolePrintData.PRINT_BUTTON)
  if (has_print_button()) {
    clear_has_data();
      ::qni::api::ConsolePrintButtonData* temp = data_.print_button_;
    data_.print_button_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::ConsolePrintButtonData& ConsolePrintData::print_button() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsolePrintData.PRINT_BUTTON)
  return has_print_button()
      ? *data_.print_button_
      : *reinterpret_cast< ::qni::api::ConsolePrintButtonData*>(&::qni::api::_ConsolePrintButtonData_default_instance_);
}
inline ::qni::api::ConsolePrintButtonData* ConsolePrintData::mutable_print_button() {
  if (!has_print_button()) {
    clear_data();
    set_has_print_button();
    data_.print_button_ = CreateMaybeMessage< ::qni::api::ConsolePrintButtonData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsolePrintData.PRINT_BUTTON)
  return data_.print_button_;
}

// .qni.api.Empty NEW_LINE = 20;
inline bool ConsolePrintData::has_new_line() const {
  return data_case() == kNEWLINE;
}
inline void ConsolePrintData::set_has_new_line() {
  _oneof_case_[0] = kNEWLINE;
}
inline void ConsolePrintData::clear_new_line() {
  if (has_new_line()) {
    delete data_.new_line_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& ConsolePrintData::_internal_new_line() const {
  return *data_.new_line_;
}
inline ::qni::api::Empty* ConsolePrintData::release_new_line() {
  // @@protoc_insertion_point(field_release:qni.api.ConsolePrintData.NEW_LINE)
  if (has_new_line()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.new_line_;
    data_.new_line_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& ConsolePrintData::new_line() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsolePrintData.NEW_LINE)
  return has_new_line()
      ? *data_.new_line_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* ConsolePrintData::mutable_new_line() {
  if (!has_new_line()) {
    clear_data();
    set_has_new_line();
    data_.new_line_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsolePrintData.NEW_LINE)
  return data_.new_line_;
}

// uint32 DELETE_LINE = 30;
inline bool ConsolePrintData::has_delete_line() const {
  return data_case() == kDELETELINE;
}
inline void ConsolePrintData::set_has_delete_line() {
  _oneof_case_[0] = kDELETELINE;
}
inline void ConsolePrintData::clear_delete_line() {
  if (has_delete_line()) {
    data_.delete_line_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 ConsolePrintData::delete_line() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsolePrintData.DELETE_LINE)
  if (has_delete_line()) {
    return data_.delete_line_;
  }
  return 0u;
}
inline void ConsolePrintData::set_delete_line(::google::protobuf::uint32 value) {
  if (!has_delete_line()) {
    clear_data();
    set_has_delete_line();
  }
  data_.delete_line_ = value;
  // @@protoc_insertion_point(field_set:qni.api.ConsolePrintData.DELETE_LINE)
}

// .qni.api.Empty CLEAR_LINE = 31;
inline bool ConsolePrintData::has_clear_line() const {
  return data_case() == kCLEARLINE;
}
inline void ConsolePrintData::set_has_clear_line() {
  _oneof_case_[0] = kCLEARLINE;
}
inline void ConsolePrintData::clear_clear_line() {
  if (has_clear_line()) {
    delete data_.clear_line_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& ConsolePrintData::_internal_clear_line() const {
  return *data_.clear_line_;
}
inline ::qni::api::Empty* ConsolePrintData::release_clear_line() {
  // @@protoc_insertion_point(field_release:qni.api.ConsolePrintData.CLEAR_LINE)
  if (has_clear_line()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.clear_line_;
    data_.clear_line_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& ConsolePrintData::clear_line() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsolePrintData.CLEAR_LINE)
  return has_clear_line()
      ? *data_.clear_line_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* ConsolePrintData::mutable_clear_line() {
  if (!has_clear_line()) {
    clear_data();
    set_has_clear_line();
    data_.clear_line_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsolePrintData.CLEAR_LINE)
  return data_.clear_line_;
}

inline bool ConsolePrintData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ConsolePrintData::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ConsolePrintData::DataCase ConsolePrintData::data_case() const {
  return ConsolePrintData::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Font

// string font_family = 1;
inline void Font::clear_font_family() {
  font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Font::font_family() const {
  // @@protoc_insertion_point(field_get:qni.api.Font.font_family)
  return font_family_.GetNoArena();
}
inline void Font::set_font_family(const ::std::string& value) {
  
  font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.Font.font_family)
}
#if LANG_CXX11
inline void Font::set_font_family(::std::string&& value) {
  
  font_family_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.Font.font_family)
}
#endif
inline void Font::set_font_family(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.Font.font_family)
}
inline void Font::set_font_family(const char* value, size_t size) {
  
  font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.Font.font_family)
}
inline ::std::string* Font::mutable_font_family() {
  
  // @@protoc_insertion_point(field_mutable:qni.api.Font.font_family)
  return font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Font::release_font_family() {
  // @@protoc_insertion_point(field_release:qni.api.Font.font_family)
  
  return font_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Font::set_allocated_font_family(::std::string* font_family) {
  if (font_family != NULL) {
    
  } else {
    
  }
  font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), font_family);
  // @@protoc_insertion_point(field_set_allocated:qni.api.Font.font_family)
}

// float font_size = 2;
inline void Font::clear_font_size() {
  font_size_ = 0;
}
inline float Font::font_size() const {
  // @@protoc_insertion_point(field_get:qni.api.Font.font_size)
  return font_size_;
}
inline void Font::set_font_size(float value) {
  
  font_size_ = value;
  // @@protoc_insertion_point(field_set:qni.api.Font.font_size)
}

// uint32 font_style = 3;
inline void Font::clear_font_style() {
  font_style_ = 0u;
}
inline ::google::protobuf::uint32 Font::font_style() const {
  // @@protoc_insertion_point(field_get:qni.api.Font.font_style)
  return font_style_;
}
inline void Font::set_font_style(::google::protobuf::uint32 value) {
  
  font_style_ = value;
  // @@protoc_insertion_point(field_set:qni.api.Font.font_style)
}

// -------------------------------------------------------------------

// ConsoleSettingItem

// uint32 TEXT_COLOR = 10;
inline bool ConsoleSettingItem::has_text_color() const {
  return data_case() == kTEXTCOLOR;
}
inline void ConsoleSettingItem::set_has_text_color() {
  _oneof_case_[0] = kTEXTCOLOR;
}
inline void ConsoleSettingItem::clear_text_color() {
  if (has_text_color()) {
    data_.text_color_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 ConsoleSettingItem::text_color() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleSettingItem.TEXT_COLOR)
  if (has_text_color()) {
    return data_.text_color_;
  }
  return 0u;
}
inline void ConsoleSettingItem::set_text_color(::google::protobuf::uint32 value) {
  if (!has_text_color()) {
    clear_data();
    set_has_text_color();
  }
  data_.text_color_ = value;
  // @@protoc_insertion_point(field_set:qni.api.ConsoleSettingItem.TEXT_COLOR)
}

// uint32 BACK_COLOR = 11;
inline bool ConsoleSettingItem::has_back_color() const {
  return data_case() == kBACKCOLOR;
}
inline void ConsoleSettingItem::set_has_back_color() {
  _oneof_case_[0] = kBACKCOLOR;
}
inline void ConsoleSettingItem::clear_back_color() {
  if (has_back_color()) {
    data_.back_color_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 ConsoleSettingItem::back_color() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleSettingItem.BACK_COLOR)
  if (has_back_color()) {
    return data_.back_color_;
  }
  return 0u;
}
inline void ConsoleSettingItem::set_back_color(::google::protobuf::uint32 value) {
  if (!has_back_color()) {
    clear_data();
    set_has_back_color();
  }
  data_.back_color_ = value;
  // @@protoc_insertion_point(field_set:qni.api.ConsoleSettingItem.BACK_COLOR)
}

// uint32 HIGHLIGHT_COLOR = 12;
inline bool ConsoleSettingItem::has_highlight_color() const {
  return data_case() == kHIGHLIGHTCOLOR;
}
inline void ConsoleSettingItem::set_has_highlight_color() {
  _oneof_case_[0] = kHIGHLIGHTCOLOR;
}
inline void ConsoleSettingItem::clear_highlight_color() {
  if (has_highlight_color()) {
    data_.highlight_color_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 ConsoleSettingItem::highlight_color() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleSettingItem.HIGHLIGHT_COLOR)
  if (has_highlight_color()) {
    return data_.highlight_color_;
  }
  return 0u;
}
inline void ConsoleSettingItem::set_highlight_color(::google::protobuf::uint32 value) {
  if (!has_highlight_color()) {
    clear_data();
    set_has_highlight_color();
  }
  data_.highlight_color_ = value;
  // @@protoc_insertion_point(field_set:qni.api.ConsoleSettingItem.HIGHLIGHT_COLOR)
}

// .qni.api.Font FONT = 20;
inline bool ConsoleSettingItem::has_font() const {
  return data_case() == kFONT;
}
inline void ConsoleSettingItem::set_has_font() {
  _oneof_case_[0] = kFONT;
}
inline void ConsoleSettingItem::clear_font() {
  if (has_font()) {
    delete data_.font_;
    clear_has_data();
  }
}
inline const ::qni::api::Font& ConsoleSettingItem::_internal_font() const {
  return *data_.font_;
}
inline ::qni::api::Font* ConsoleSettingItem::release_font() {
  // @@protoc_insertion_point(field_release:qni.api.ConsoleSettingItem.FONT)
  if (has_font()) {
    clear_has_data();
      ::qni::api::Font* temp = data_.font_;
    data_.font_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Font& ConsoleSettingItem::font() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleSettingItem.FONT)
  return has_font()
      ? *data_.font_
      : *reinterpret_cast< ::qni::api::Font*>(&::qni::api::_Font_default_instance_);
}
inline ::qni::api::Font* ConsoleSettingItem::mutable_font() {
  if (!has_font()) {
    clear_data();
    set_has_font();
    data_.font_ = CreateMaybeMessage< ::qni::api::Font >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsoleSettingItem.FONT)
  return data_.font_;
}

// .qni.api.TextAlign TEXT_ALIGN = 21;
inline bool ConsoleSettingItem::has_text_align() const {
  return data_case() == kTEXTALIGN;
}
inline void ConsoleSettingItem::set_has_text_align() {
  _oneof_case_[0] = kTEXTALIGN;
}
inline void ConsoleSettingItem::clear_text_align() {
  if (has_text_align()) {
    data_.text_align_ = 0;
    clear_has_data();
  }
}
inline ::qni::api::TextAlign ConsoleSettingItem::text_align() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleSettingItem.TEXT_ALIGN)
  if (has_text_align()) {
    return static_cast< ::qni::api::TextAlign >(data_.text_align_);
  }
  return static_cast< ::qni::api::TextAlign >(0);
}
inline void ConsoleSettingItem::set_text_align(::qni::api::TextAlign value) {
  if (!has_text_align()) {
    clear_data();
    set_has_text_align();
  }
  data_.text_align_ = value;
  // @@protoc_insertion_point(field_set:qni.api.ConsoleSettingItem.TEXT_ALIGN)
}

inline bool ConsoleSettingItem::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ConsoleSettingItem::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ConsoleSettingItem::DataCase ConsoleSettingItem::data_case() const {
  return ConsoleSettingItem::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConsoleRequest

// string LOAD_STATE = 10;
inline bool ConsoleRequest::has_load_state() const {
  return data_case() == kLOADSTATE;
}
inline void ConsoleRequest::set_has_load_state() {
  _oneof_case_[0] = kLOADSTATE;
}
inline void ConsoleRequest::clear_load_state() {
  if (has_load_state()) {
    data_.load_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& ConsoleRequest::load_state() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleRequest.LOAD_STATE)
  if (has_load_state()) {
    return data_.load_state_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ConsoleRequest::set_load_state(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.LOAD_STATE)
  if (!has_load_state()) {
    clear_data();
    set_has_load_state();
    data_.load_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.load_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.LOAD_STATE)
}
#if LANG_CXX11
inline void ConsoleRequest::set_load_state(::std::string&& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.LOAD_STATE)
  if (!has_load_state()) {
    clear_data();
    set_has_load_state();
    data_.load_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.load_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.ConsoleRequest.LOAD_STATE)
}
#endif
inline void ConsoleRequest::set_load_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_load_state()) {
    clear_data();
    set_has_load_state();
    data_.load_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.load_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.ConsoleRequest.LOAD_STATE)
}
inline void ConsoleRequest::set_load_state(const char* value, size_t size) {
  if (!has_load_state()) {
    clear_data();
    set_has_load_state();
    data_.load_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.load_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.ConsoleRequest.LOAD_STATE)
}
inline ::std::string* ConsoleRequest::mutable_load_state() {
  if (!has_load_state()) {
    clear_data();
    set_has_load_state();
    data_.load_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsoleRequest.LOAD_STATE)
  return data_.load_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsoleRequest::release_load_state() {
  // @@protoc_insertion_point(field_release:qni.api.ConsoleRequest.LOAD_STATE)
  if (has_load_state()) {
    clear_has_data();
    return data_.load_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ConsoleRequest::set_allocated_load_state(::std::string* load_state) {
  if (!has_load_state()) {
    data_.load_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (load_state != NULL) {
    set_has_load_state();
    data_.load_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), load_state);
  }
  // @@protoc_insertion_point(field_set_allocated:qni.api.ConsoleRequest.LOAD_STATE)
}

// string SHARE_STATE = 11;
inline bool ConsoleRequest::has_share_state() const {
  return data_case() == kSHARESTATE;
}
inline void ConsoleRequest::set_has_share_state() {
  _oneof_case_[0] = kSHARESTATE;
}
inline void ConsoleRequest::clear_share_state() {
  if (has_share_state()) {
    data_.share_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& ConsoleRequest::share_state() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleRequest.SHARE_STATE)
  if (has_share_state()) {
    return data_.share_state_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ConsoleRequest::set_share_state(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.SHARE_STATE)
  if (!has_share_state()) {
    clear_data();
    set_has_share_state();
    data_.share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.share_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.SHARE_STATE)
}
#if LANG_CXX11
inline void ConsoleRequest::set_share_state(::std::string&& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.SHARE_STATE)
  if (!has_share_state()) {
    clear_data();
    set_has_share_state();
    data_.share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.share_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.ConsoleRequest.SHARE_STATE)
}
#endif
inline void ConsoleRequest::set_share_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_share_state()) {
    clear_data();
    set_has_share_state();
    data_.share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.share_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.ConsoleRequest.SHARE_STATE)
}
inline void ConsoleRequest::set_share_state(const char* value, size_t size) {
  if (!has_share_state()) {
    clear_data();
    set_has_share_state();
    data_.share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.share_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.ConsoleRequest.SHARE_STATE)
}
inline ::std::string* ConsoleRequest::mutable_share_state() {
  if (!has_share_state()) {
    clear_data();
    set_has_share_state();
    data_.share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsoleRequest.SHARE_STATE)
  return data_.share_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsoleRequest::release_share_state() {
  // @@protoc_insertion_point(field_release:qni.api.ConsoleRequest.SHARE_STATE)
  if (has_share_state()) {
    clear_has_data();
    return data_.share_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ConsoleRequest::set_allocated_share_state(::std::string* share_state) {
  if (!has_share_state()) {
    data_.share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (share_state != NULL) {
    set_has_share_state();
    data_.share_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_state);
  }
  // @@protoc_insertion_point(field_set_allocated:qni.api.ConsoleRequest.SHARE_STATE)
}

// string SHARE_STATE_OVERWRITE = 12;
inline bool ConsoleRequest::has_share_state_overwrite() const {
  return data_case() == kSHARESTATEOVERWRITE;
}
inline void ConsoleRequest::set_has_share_state_overwrite() {
  _oneof_case_[0] = kSHARESTATEOVERWRITE;
}
inline void ConsoleRequest::clear_share_state_overwrite() {
  if (has_share_state_overwrite()) {
    data_.share_state_overwrite_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& ConsoleRequest::share_state_overwrite() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleRequest.SHARE_STATE_OVERWRITE)
  if (has_share_state_overwrite()) {
    return data_.share_state_overwrite_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ConsoleRequest::set_share_state_overwrite(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.SHARE_STATE_OVERWRITE)
  if (!has_share_state_overwrite()) {
    clear_data();
    set_has_share_state_overwrite();
    data_.share_state_overwrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.share_state_overwrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.SHARE_STATE_OVERWRITE)
}
#if LANG_CXX11
inline void ConsoleRequest::set_share_state_overwrite(::std::string&& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.SHARE_STATE_OVERWRITE)
  if (!has_share_state_overwrite()) {
    clear_data();
    set_has_share_state_overwrite();
    data_.share_state_overwrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.share_state_overwrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.ConsoleRequest.SHARE_STATE_OVERWRITE)
}
#endif
inline void ConsoleRequest::set_share_state_overwrite(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_share_state_overwrite()) {
    clear_data();
    set_has_share_state_overwrite();
    data_.share_state_overwrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.share_state_overwrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.ConsoleRequest.SHARE_STATE_OVERWRITE)
}
inline void ConsoleRequest::set_share_state_overwrite(const char* value, size_t size) {
  if (!has_share_state_overwrite()) {
    clear_data();
    set_has_share_state_overwrite();
    data_.share_state_overwrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.share_state_overwrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.ConsoleRequest.SHARE_STATE_OVERWRITE)
}
inline ::std::string* ConsoleRequest::mutable_share_state_overwrite() {
  if (!has_share_state_overwrite()) {
    clear_data();
    set_has_share_state_overwrite();
    data_.share_state_overwrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsoleRequest.SHARE_STATE_OVERWRITE)
  return data_.share_state_overwrite_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsoleRequest::release_share_state_overwrite() {
  // @@protoc_insertion_point(field_release:qni.api.ConsoleRequest.SHARE_STATE_OVERWRITE)
  if (has_share_state_overwrite()) {
    clear_has_data();
    return data_.share_state_overwrite_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ConsoleRequest::set_allocated_share_state_overwrite(::std::string* share_state_overwrite) {
  if (!has_share_state_overwrite()) {
    data_.share_state_overwrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (share_state_overwrite != NULL) {
    set_has_share_state_overwrite();
    data_.share_state_overwrite_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_state_overwrite);
  }
  // @@protoc_insertion_point(field_set_allocated:qni.api.ConsoleRequest.SHARE_STATE_OVERWRITE)
}

// string DELETE_STATE = 13;
inline bool ConsoleRequest::has_delete_state() const {
  return data_case() == kDELETESTATE;
}
inline void ConsoleRequest::set_has_delete_state() {
  _oneof_case_[0] = kDELETESTATE;
}
inline void ConsoleRequest::clear_delete_state() {
  if (has_delete_state()) {
    data_.delete_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& ConsoleRequest::delete_state() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleRequest.DELETE_STATE)
  if (has_delete_state()) {
    return data_.delete_state_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ConsoleRequest::set_delete_state(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.DELETE_STATE)
  if (!has_delete_state()) {
    clear_data();
    set_has_delete_state();
    data_.delete_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.delete_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.DELETE_STATE)
}
#if LANG_CXX11
inline void ConsoleRequest::set_delete_state(::std::string&& value) {
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.DELETE_STATE)
  if (!has_delete_state()) {
    clear_data();
    set_has_delete_state();
    data_.delete_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.delete_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.ConsoleRequest.DELETE_STATE)
}
#endif
inline void ConsoleRequest::set_delete_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_delete_state()) {
    clear_data();
    set_has_delete_state();
    data_.delete_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.delete_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.ConsoleRequest.DELETE_STATE)
}
inline void ConsoleRequest::set_delete_state(const char* value, size_t size) {
  if (!has_delete_state()) {
    clear_data();
    set_has_delete_state();
    data_.delete_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.delete_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.ConsoleRequest.DELETE_STATE)
}
inline ::std::string* ConsoleRequest::mutable_delete_state() {
  if (!has_delete_state()) {
    clear_data();
    set_has_delete_state();
    data_.delete_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsoleRequest.DELETE_STATE)
  return data_.delete_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsoleRequest::release_delete_state() {
  // @@protoc_insertion_point(field_release:qni.api.ConsoleRequest.DELETE_STATE)
  if (has_delete_state()) {
    clear_has_data();
    return data_.delete_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ConsoleRequest::set_allocated_delete_state(::std::string* delete_state) {
  if (!has_delete_state()) {
    data_.delete_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (delete_state != NULL) {
    set_has_delete_state();
    data_.delete_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delete_state);
  }
  // @@protoc_insertion_point(field_set_allocated:qni.api.ConsoleRequest.DELETE_STATE)
}

// uint64 GET_STATE = 20;
inline bool ConsoleRequest::has_get_state() const {
  return data_case() == kGETSTATE;
}
inline void ConsoleRequest::set_has_get_state() {
  _oneof_case_[0] = kGETSTATE;
}
inline void ConsoleRequest::clear_get_state() {
  if (has_get_state()) {
    data_.get_state_ = GOOGLE_ULONGLONG(0);
    clear_has_data();
  }
}
inline ::google::protobuf::uint64 ConsoleRequest::get_state() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleRequest.GET_STATE)
  if (has_get_state()) {
    return data_.get_state_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ConsoleRequest::set_get_state(::google::protobuf::uint64 value) {
  if (!has_get_state()) {
    clear_data();
    set_has_get_state();
  }
  data_.get_state_ = value;
  // @@protoc_insertion_point(field_set:qni.api.ConsoleRequest.GET_STATE)
}

inline bool ConsoleRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ConsoleRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ConsoleRequest::DataCase ConsoleRequest::data_case() const {
  return ConsoleRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConsoleResponse

// uint32 tag = 1;
inline void ConsoleResponse::clear_tag() {
  tag_ = 0u;
}
inline ::google::protobuf::uint32 ConsoleResponse::tag() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleResponse.tag)
  return tag_;
}
inline void ConsoleResponse::set_tag(::google::protobuf::uint32 value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:qni.api.ConsoleResponse.tag)
}

// .qni.api.InputResponse OK_INPUT = 10;
inline bool ConsoleResponse::has_ok_input() const {
  return data_case() == kOKINPUT;
}
inline void ConsoleResponse::set_has_ok_input() {
  _oneof_case_[0] = kOKINPUT;
}
inline void ConsoleResponse::clear_ok_input() {
  if (has_ok_input()) {
    delete data_.ok_input_;
    clear_has_data();
  }
}
inline const ::qni::api::InputResponse& ConsoleResponse::_internal_ok_input() const {
  return *data_.ok_input_;
}
inline ::qni::api::InputResponse* ConsoleResponse::release_ok_input() {
  // @@protoc_insertion_point(field_release:qni.api.ConsoleResponse.OK_INPUT)
  if (has_ok_input()) {
    clear_has_data();
      ::qni::api::InputResponse* temp = data_.ok_input_;
    data_.ok_input_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::InputResponse& ConsoleResponse::ok_input() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleResponse.OK_INPUT)
  return has_ok_input()
      ? *data_.ok_input_
      : *reinterpret_cast< ::qni::api::InputResponse*>(&::qni::api::_InputResponse_default_instance_);
}
inline ::qni::api::InputResponse* ConsoleResponse::mutable_ok_input() {
  if (!has_ok_input()) {
    clear_data();
    set_has_ok_input();
    data_.ok_input_ = CreateMaybeMessage< ::qni::api::InputResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsoleResponse.OK_INPUT)
  return data_.ok_input_;
}

// .qni.api.ErrorResponse ERR = 255;
inline bool ConsoleResponse::has_err() const {
  return data_case() == kERR;
}
inline void ConsoleResponse::set_has_err() {
  _oneof_case_[0] = kERR;
}
inline void ConsoleResponse::clear_err() {
  if (has_err()) {
    delete data_.err_;
    clear_has_data();
  }
}
inline const ::qni::api::ErrorResponse& ConsoleResponse::_internal_err() const {
  return *data_.err_;
}
inline ::qni::api::ErrorResponse* ConsoleResponse::release_err() {
  // @@protoc_insertion_point(field_release:qni.api.ConsoleResponse.ERR)
  if (has_err()) {
    clear_has_data();
      ::qni::api::ErrorResponse* temp = data_.err_;
    data_.err_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::ErrorResponse& ConsoleResponse::err() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleResponse.ERR)
  return has_err()
      ? *data_.err_
      : *reinterpret_cast< ::qni::api::ErrorResponse*>(&::qni::api::_ErrorResponse_default_instance_);
}
inline ::qni::api::ErrorResponse* ConsoleResponse::mutable_err() {
  if (!has_err()) {
    clear_data();
    set_has_err();
    data_.err_ = CreateMaybeMessage< ::qni::api::ErrorResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsoleResponse.ERR)
  return data_.err_;
}

inline bool ConsoleResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ConsoleResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ConsoleResponse::DataCase ConsoleResponse::data_case() const {
  return ConsoleResponse::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConsoleMessage

// .qni.api.ConsoleRequest REQ = 10;
inline bool ConsoleMessage::has_req() const {
  return data_case() == kREQ;
}
inline void ConsoleMessage::set_has_req() {
  _oneof_case_[0] = kREQ;
}
inline void ConsoleMessage::clear_req() {
  if (has_req()) {
    delete data_.req_;
    clear_has_data();
  }
}
inline const ::qni::api::ConsoleRequest& ConsoleMessage::_internal_req() const {
  return *data_.req_;
}
inline ::qni::api::ConsoleRequest* ConsoleMessage::release_req() {
  // @@protoc_insertion_point(field_release:qni.api.ConsoleMessage.REQ)
  if (has_req()) {
    clear_has_data();
      ::qni::api::ConsoleRequest* temp = data_.req_;
    data_.req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::ConsoleRequest& ConsoleMessage::req() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleMessage.REQ)
  return has_req()
      ? *data_.req_
      : *reinterpret_cast< ::qni::api::ConsoleRequest*>(&::qni::api::_ConsoleRequest_default_instance_);
}
inline ::qni::api::ConsoleRequest* ConsoleMessage::mutable_req() {
  if (!has_req()) {
    clear_data();
    set_has_req();
    data_.req_ = CreateMaybeMessage< ::qni::api::ConsoleRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsoleMessage.REQ)
  return data_.req_;
}

// .qni.api.ConsoleResponse RES = 11;
inline bool ConsoleMessage::has_res() const {
  return data_case() == kRES;
}
inline void ConsoleMessage::set_has_res() {
  _oneof_case_[0] = kRES;
}
inline void ConsoleMessage::clear_res() {
  if (has_res()) {
    delete data_.res_;
    clear_has_data();
  }
}
inline const ::qni::api::ConsoleResponse& ConsoleMessage::_internal_res() const {
  return *data_.res_;
}
inline ::qni::api::ConsoleResponse* ConsoleMessage::release_res() {
  // @@protoc_insertion_point(field_release:qni.api.ConsoleMessage.RES)
  if (has_res()) {
    clear_has_data();
      ::qni::api::ConsoleResponse* temp = data_.res_;
    data_.res_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::ConsoleResponse& ConsoleMessage::res() const {
  // @@protoc_insertion_point(field_get:qni.api.ConsoleMessage.RES)
  return has_res()
      ? *data_.res_
      : *reinterpret_cast< ::qni::api::ConsoleResponse*>(&::qni::api::_ConsoleResponse_default_instance_);
}
inline ::qni::api::ConsoleResponse* ConsoleMessage::mutable_res() {
  if (!has_res()) {
    clear_data();
    set_has_res();
    data_.res_ = CreateMaybeMessage< ::qni::api::ConsoleResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ConsoleMessage.RES)
  return data_.res_;
}

inline bool ConsoleMessage::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ConsoleMessage::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ConsoleMessage::DataCase ConsoleMessage::data_case() const {
  return ConsoleMessage::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProgramCommand

// .qni.api.ConsolePrintData PRINT = 10;
inline bool ProgramCommand::has_print() const {
  return data_case() == kPRINT;
}
inline void ProgramCommand::set_has_print() {
  _oneof_case_[0] = kPRINT;
}
inline void ProgramCommand::clear_print() {
  if (has_print()) {
    delete data_.print_;
    clear_has_data();
  }
}
inline const ::qni::api::ConsolePrintData& ProgramCommand::_internal_print() const {
  return *data_.print_;
}
inline ::qni::api::ConsolePrintData* ProgramCommand::release_print() {
  // @@protoc_insertion_point(field_release:qni.api.ProgramCommand.PRINT)
  if (has_print()) {
    clear_has_data();
      ::qni::api::ConsolePrintData* temp = data_.print_;
    data_.print_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::ConsolePrintData& ProgramCommand::print() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramCommand.PRINT)
  return has_print()
      ? *data_.print_
      : *reinterpret_cast< ::qni::api::ConsolePrintData*>(&::qni::api::_ConsolePrintData_default_instance_);
}
inline ::qni::api::ConsolePrintData* ProgramCommand::mutable_print() {
  if (!has_print()) {
    clear_data();
    set_has_print();
    data_.print_ = CreateMaybeMessage< ::qni::api::ConsolePrintData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramCommand.PRINT)
  return data_.print_;
}

// .qni.api.ConsoleSettingItem UPDATE_SETTING = 11;
inline bool ProgramCommand::has_update_setting() const {
  return data_case() == kUPDATESETTING;
}
inline void ProgramCommand::set_has_update_setting() {
  _oneof_case_[0] = kUPDATESETTING;
}
inline void ProgramCommand::clear_update_setting() {
  if (has_update_setting()) {
    delete data_.update_setting_;
    clear_has_data();
  }
}
inline const ::qni::api::ConsoleSettingItem& ProgramCommand::_internal_update_setting() const {
  return *data_.update_setting_;
}
inline ::qni::api::ConsoleSettingItem* ProgramCommand::release_update_setting() {
  // @@protoc_insertion_point(field_release:qni.api.ProgramCommand.UPDATE_SETTING)
  if (has_update_setting()) {
    clear_has_data();
      ::qni::api::ConsoleSettingItem* temp = data_.update_setting_;
    data_.update_setting_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::ConsoleSettingItem& ProgramCommand::update_setting() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramCommand.UPDATE_SETTING)
  return has_update_setting()
      ? *data_.update_setting_
      : *reinterpret_cast< ::qni::api::ConsoleSettingItem*>(&::qni::api::_ConsoleSettingItem_default_instance_);
}
inline ::qni::api::ConsoleSettingItem* ProgramCommand::mutable_update_setting() {
  if (!has_update_setting()) {
    clear_data();
    set_has_update_setting();
    data_.update_setting_ = CreateMaybeMessage< ::qni::api::ConsoleSettingItem >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramCommand.UPDATE_SETTING)
  return data_.update_setting_;
}

inline bool ProgramCommand::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ProgramCommand::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ProgramCommand::DataCase ProgramCommand::data_case() const {
  return ProgramCommand::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProgramCommandArray

// repeated .qni.api.ProgramCommand commands = 1;
inline int ProgramCommandArray::commands_size() const {
  return commands_.size();
}
inline void ProgramCommandArray::clear_commands() {
  commands_.Clear();
}
inline ::qni::api::ProgramCommand* ProgramCommandArray::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramCommandArray.commands)
  return commands_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::qni::api::ProgramCommand >*
ProgramCommandArray::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:qni.api.ProgramCommandArray.commands)
  return &commands_;
}
inline const ::qni::api::ProgramCommand& ProgramCommandArray::commands(int index) const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramCommandArray.commands)
  return commands_.Get(index);
}
inline ::qni::api::ProgramCommand* ProgramCommandArray::add_commands() {
  // @@protoc_insertion_point(field_add:qni.api.ProgramCommandArray.commands)
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qni::api::ProgramCommand >&
ProgramCommandArray::commands() const {
  // @@protoc_insertion_point(field_list:qni.api.ProgramCommandArray.commands)
  return commands_;
}

// -------------------------------------------------------------------

// ProgramRequest

// uint32 tag = 1;
inline void ProgramRequest::clear_tag() {
  tag_ = 0u;
}
inline ::google::protobuf::uint32 ProgramRequest::tag() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramRequest.tag)
  return tag_;
}
inline void ProgramRequest::set_tag(::google::protobuf::uint32 value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:qni.api.ProgramRequest.tag)
}

// .qni.api.InputRequest INPUT = 10;
inline bool ProgramRequest::has_input() const {
  return data_case() == kINPUT;
}
inline void ProgramRequest::set_has_input() {
  _oneof_case_[0] = kINPUT;
}
inline void ProgramRequest::clear_input() {
  if (has_input()) {
    delete data_.input_;
    clear_has_data();
  }
}
inline const ::qni::api::InputRequest& ProgramRequest::_internal_input() const {
  return *data_.input_;
}
inline ::qni::api::InputRequest* ProgramRequest::release_input() {
  // @@protoc_insertion_point(field_release:qni.api.ProgramRequest.INPUT)
  if (has_input()) {
    clear_has_data();
      ::qni::api::InputRequest* temp = data_.input_;
    data_.input_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::InputRequest& ProgramRequest::input() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramRequest.INPUT)
  return has_input()
      ? *data_.input_
      : *reinterpret_cast< ::qni::api::InputRequest*>(&::qni::api::_InputRequest_default_instance_);
}
inline ::qni::api::InputRequest* ProgramRequest::mutable_input() {
  if (!has_input()) {
    clear_data();
    set_has_input();
    data_.input_ = CreateMaybeMessage< ::qni::api::InputRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramRequest.INPUT)
  return data_.input_;
}

inline bool ProgramRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ProgramRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ProgramRequest::DataCase ProgramRequest::data_case() const {
  return ProgramRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProgramResponse

// .qni.api.Empty OK_LOAD_STATE = 10;
inline bool ProgramResponse::has_ok_load_state() const {
  return data_case() == kOKLOADSTATE;
}
inline void ProgramResponse::set_has_ok_load_state() {
  _oneof_case_[0] = kOKLOADSTATE;
}
inline void ProgramResponse::clear_ok_load_state() {
  if (has_ok_load_state()) {
    delete data_.ok_load_state_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& ProgramResponse::_internal_ok_load_state() const {
  return *data_.ok_load_state_;
}
inline ::qni::api::Empty* ProgramResponse::release_ok_load_state() {
  // @@protoc_insertion_point(field_release:qni.api.ProgramResponse.OK_LOAD_STATE)
  if (has_ok_load_state()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.ok_load_state_;
    data_.ok_load_state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& ProgramResponse::ok_load_state() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramResponse.OK_LOAD_STATE)
  return has_ok_load_state()
      ? *data_.ok_load_state_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* ProgramResponse::mutable_ok_load_state() {
  if (!has_ok_load_state()) {
    clear_data();
    set_has_ok_load_state();
    data_.ok_load_state_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramResponse.OK_LOAD_STATE)
  return data_.ok_load_state_;
}

// .qni.api.Empty OK_DELETE_STATE = 11;
inline bool ProgramResponse::has_ok_delete_state() const {
  return data_case() == kOKDELETESTATE;
}
inline void ProgramResponse::set_has_ok_delete_state() {
  _oneof_case_[0] = kOKDELETESTATE;
}
inline void ProgramResponse::clear_ok_delete_state() {
  if (has_ok_delete_state()) {
    delete data_.ok_delete_state_;
    clear_has_data();
  }
}
inline const ::qni::api::Empty& ProgramResponse::_internal_ok_delete_state() const {
  return *data_.ok_delete_state_;
}
inline ::qni::api::Empty* ProgramResponse::release_ok_delete_state() {
  // @@protoc_insertion_point(field_release:qni.api.ProgramResponse.OK_DELETE_STATE)
  if (has_ok_delete_state()) {
    clear_has_data();
      ::qni::api::Empty* temp = data_.ok_delete_state_;
    data_.ok_delete_state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::Empty& ProgramResponse::ok_delete_state() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramResponse.OK_DELETE_STATE)
  return has_ok_delete_state()
      ? *data_.ok_delete_state_
      : *reinterpret_cast< ::qni::api::Empty*>(&::qni::api::_Empty_default_instance_);
}
inline ::qni::api::Empty* ProgramResponse::mutable_ok_delete_state() {
  if (!has_ok_delete_state()) {
    clear_data();
    set_has_ok_delete_state();
    data_.ok_delete_state_ = CreateMaybeMessage< ::qni::api::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramResponse.OK_DELETE_STATE)
  return data_.ok_delete_state_;
}

// string OK_SHARE_STATE = 12;
inline bool ProgramResponse::has_ok_share_state() const {
  return data_case() == kOKSHARESTATE;
}
inline void ProgramResponse::set_has_ok_share_state() {
  _oneof_case_[0] = kOKSHARESTATE;
}
inline void ProgramResponse::clear_ok_share_state() {
  if (has_ok_share_state()) {
    data_.ok_share_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& ProgramResponse::ok_share_state() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramResponse.OK_SHARE_STATE)
  if (has_ok_share_state()) {
    return data_.ok_share_state_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ProgramResponse::set_ok_share_state(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qni.api.ProgramResponse.OK_SHARE_STATE)
  if (!has_ok_share_state()) {
    clear_data();
    set_has_ok_share_state();
    data_.ok_share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.ok_share_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qni.api.ProgramResponse.OK_SHARE_STATE)
}
#if LANG_CXX11
inline void ProgramResponse::set_ok_share_state(::std::string&& value) {
  // @@protoc_insertion_point(field_set:qni.api.ProgramResponse.OK_SHARE_STATE)
  if (!has_ok_share_state()) {
    clear_data();
    set_has_ok_share_state();
    data_.ok_share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.ok_share_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qni.api.ProgramResponse.OK_SHARE_STATE)
}
#endif
inline void ProgramResponse::set_ok_share_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_ok_share_state()) {
    clear_data();
    set_has_ok_share_state();
    data_.ok_share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.ok_share_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qni.api.ProgramResponse.OK_SHARE_STATE)
}
inline void ProgramResponse::set_ok_share_state(const char* value, size_t size) {
  if (!has_ok_share_state()) {
    clear_data();
    set_has_ok_share_state();
    data_.ok_share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.ok_share_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qni.api.ProgramResponse.OK_SHARE_STATE)
}
inline ::std::string* ProgramResponse::mutable_ok_share_state() {
  if (!has_ok_share_state()) {
    clear_data();
    set_has_ok_share_state();
    data_.ok_share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramResponse.OK_SHARE_STATE)
  return data_.ok_share_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProgramResponse::release_ok_share_state() {
  // @@protoc_insertion_point(field_release:qni.api.ProgramResponse.OK_SHARE_STATE)
  if (has_ok_share_state()) {
    clear_has_data();
    return data_.ok_share_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ProgramResponse::set_allocated_ok_share_state(::std::string* ok_share_state) {
  if (!has_ok_share_state()) {
    data_.ok_share_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (ok_share_state != NULL) {
    set_has_ok_share_state();
    data_.ok_share_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok_share_state);
  }
  // @@protoc_insertion_point(field_set_allocated:qni.api.ProgramResponse.OK_SHARE_STATE)
}

// .qni.api.ProgramCommandArray OK_GET_STATE = 13;
inline bool ProgramResponse::has_ok_get_state() const {
  return data_case() == kOKGETSTATE;
}
inline void ProgramResponse::set_has_ok_get_state() {
  _oneof_case_[0] = kOKGETSTATE;
}
inline void ProgramResponse::clear_ok_get_state() {
  if (has_ok_get_state()) {
    delete data_.ok_get_state_;
    clear_has_data();
  }
}
inline const ::qni::api::ProgramCommandArray& ProgramResponse::_internal_ok_get_state() const {
  return *data_.ok_get_state_;
}
inline ::qni::api::ProgramCommandArray* ProgramResponse::release_ok_get_state() {
  // @@protoc_insertion_point(field_release:qni.api.ProgramResponse.OK_GET_STATE)
  if (has_ok_get_state()) {
    clear_has_data();
      ::qni::api::ProgramCommandArray* temp = data_.ok_get_state_;
    data_.ok_get_state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::ProgramCommandArray& ProgramResponse::ok_get_state() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramResponse.OK_GET_STATE)
  return has_ok_get_state()
      ? *data_.ok_get_state_
      : *reinterpret_cast< ::qni::api::ProgramCommandArray*>(&::qni::api::_ProgramCommandArray_default_instance_);
}
inline ::qni::api::ProgramCommandArray* ProgramResponse::mutable_ok_get_state() {
  if (!has_ok_get_state()) {
    clear_data();
    set_has_ok_get_state();
    data_.ok_get_state_ = CreateMaybeMessage< ::qni::api::ProgramCommandArray >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramResponse.OK_GET_STATE)
  return data_.ok_get_state_;
}

// .qni.api.ErrorResponse ERR = 255;
inline bool ProgramResponse::has_err() const {
  return data_case() == kERR;
}
inline void ProgramResponse::set_has_err() {
  _oneof_case_[0] = kERR;
}
inline void ProgramResponse::clear_err() {
  if (has_err()) {
    delete data_.err_;
    clear_has_data();
  }
}
inline const ::qni::api::ErrorResponse& ProgramResponse::_internal_err() const {
  return *data_.err_;
}
inline ::qni::api::ErrorResponse* ProgramResponse::release_err() {
  // @@protoc_insertion_point(field_release:qni.api.ProgramResponse.ERR)
  if (has_err()) {
    clear_has_data();
      ::qni::api::ErrorResponse* temp = data_.err_;
    data_.err_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::ErrorResponse& ProgramResponse::err() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramResponse.ERR)
  return has_err()
      ? *data_.err_
      : *reinterpret_cast< ::qni::api::ErrorResponse*>(&::qni::api::_ErrorResponse_default_instance_);
}
inline ::qni::api::ErrorResponse* ProgramResponse::mutable_err() {
  if (!has_err()) {
    clear_data();
    set_has_err();
    data_.err_ = CreateMaybeMessage< ::qni::api::ErrorResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramResponse.ERR)
  return data_.err_;
}

inline bool ProgramResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ProgramResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ProgramResponse::DataCase ProgramResponse::data_case() const {
  return ProgramResponse::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProgramMessage

// .qni.api.ProgramRequest REQ = 10;
inline bool ProgramMessage::has_req() const {
  return data_case() == kREQ;
}
inline void ProgramMessage::set_has_req() {
  _oneof_case_[0] = kREQ;
}
inline void ProgramMessage::clear_req() {
  if (has_req()) {
    delete data_.req_;
    clear_has_data();
  }
}
inline const ::qni::api::ProgramRequest& ProgramMessage::_internal_req() const {
  return *data_.req_;
}
inline ::qni::api::ProgramRequest* ProgramMessage::release_req() {
  // @@protoc_insertion_point(field_release:qni.api.ProgramMessage.REQ)
  if (has_req()) {
    clear_has_data();
      ::qni::api::ProgramRequest* temp = data_.req_;
    data_.req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::ProgramRequest& ProgramMessage::req() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramMessage.REQ)
  return has_req()
      ? *data_.req_
      : *reinterpret_cast< ::qni::api::ProgramRequest*>(&::qni::api::_ProgramRequest_default_instance_);
}
inline ::qni::api::ProgramRequest* ProgramMessage::mutable_req() {
  if (!has_req()) {
    clear_data();
    set_has_req();
    data_.req_ = CreateMaybeMessage< ::qni::api::ProgramRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramMessage.REQ)
  return data_.req_;
}

// .qni.api.ProgramResponse RES = 11;
inline bool ProgramMessage::has_res() const {
  return data_case() == kRES;
}
inline void ProgramMessage::set_has_res() {
  _oneof_case_[0] = kRES;
}
inline void ProgramMessage::clear_res() {
  if (has_res()) {
    delete data_.res_;
    clear_has_data();
  }
}
inline const ::qni::api::ProgramResponse& ProgramMessage::_internal_res() const {
  return *data_.res_;
}
inline ::qni::api::ProgramResponse* ProgramMessage::release_res() {
  // @@protoc_insertion_point(field_release:qni.api.ProgramMessage.RES)
  if (has_res()) {
    clear_has_data();
      ::qni::api::ProgramResponse* temp = data_.res_;
    data_.res_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::qni::api::ProgramResponse& ProgramMessage::res() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramMessage.RES)
  return has_res()
      ? *data_.res_
      : *reinterpret_cast< ::qni::api::ProgramResponse*>(&::qni::api::_ProgramResponse_default_instance_);
}
inline ::qni::api::ProgramResponse* ProgramMessage::mutable_res() {
  if (!has_res()) {
    clear_data();
    set_has_res();
    data_.res_ = CreateMaybeMessage< ::qni::api::ProgramResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:qni.api.ProgramMessage.RES)
  return data_.res_;
}

// uint32 ACCEPT_RES = 12;
inline bool ProgramMessage::has_accept_res() const {
  return data_case() == kACCEPTRES;
}
inline void ProgramMessage::set_has_accept_res() {
  _oneof_case_[0] = kACCEPTRES;
}
inline void ProgramMessage::clear_accept_res() {
  if (has_accept_res()) {
    data_.accept_res_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 ProgramMessage::accept_res() const {
  // @@protoc_insertion_point(field_get:qni.api.ProgramMessage.ACCEPT_RES)
  if (has_accept_res()) {
    return data_.accept_res_;
  }
  return 0u;
}
inline void ProgramMessage::set_accept_res(::google::protobuf::uint32 value) {
  if (!has_accept_res()) {
    clear_data();
    set_has_accept_res();
  }
  data_.accept_res_ = value;
  // @@protoc_insertion_point(field_set:qni.api.ProgramMessage.ACCEPT_RES)
}

inline bool ProgramMessage::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ProgramMessage::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ProgramMessage::DataCase ProgramMessage::data_case() const {
  return ProgramMessage::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace qni

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::qni::api::FontStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qni::api::FontStyle>() {
  return ::qni::api::FontStyle_descriptor();
}
template <> struct is_proto_enum< ::qni::api::TextAlign> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qni::api::TextAlign>() {
  return ::qni::api::TextAlign_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_qni_2dapi_2eproto
